}
multi_morbid=readRDS("../data/processed/multi_morbid_ordinal_factors.rds")
multi_morbid=multi_morbid[1:200,]
multi_morbid=readRDS("../data/processed/multi_morbid_ordinal_keep.rds")
multi_morbid=multi_morbid[1:200,]
source("code/utility_functions/FAMD_plots_utility.R")
source("code/utility_functions/colors_themes_utility.R")
source("code/utility_functions/clustering_utility.R")
FAMD_multi_morbid_res=readRDS("../data/processed/FAMD_ordinal_factors_multi_morbid_res.rds")
nb_comp_FAMD_multi_morbid=which(FAMD_multi_morbid_res$eig[,3] > 90)[1]
RF_proximity_measure_multi_morbid_res=readRDS("../data/processed/RF_proximity_measure_ordinal_factors_multi_morbid_res.rds")
RF_pam_multi_morbid=pam(RF_proximity_measure_multi_morbid_res, 2)
saveRDS(RF_pam_multi_morbid,"../results/results_joel_HPC/RF_pam_ordinal_factors/RF_pam_ordinal_factors_multi_morbid.rds")
clusters_RF_pam_multi_morbid=RF_pam_multi_morbid$clustering
RF_pam_multi_morbid_plot_d12=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_RF_pam_multi_morbid,
dims=c(1,2),
custom_theme=theme_jh,color_scale=distinct_scale)
RF_pam_multi_morbid_plot_d34=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_RF_pam_multi_morbid,
dims=c(3,4),
custom_theme=theme_jh,color_scale=distinct_scale)
svg(filename="../results/results_joel_HPC/RF_pam_ordinal_factors/RF_pam_ordinal_factors_multi_morbid_plot_d12.svg",width=10,height=10)
print(RF_pam_multi_morbid_plot_d12)
dev.off()
svg(filename="../results/results_joel_HPC/RF_pam_ordinal_factors/RF_pam_ordinal_factors_multi_morbid_plot_d34.svg",width=10,height=10)
print(RF_pam_multi_morbid_plot_d34)
dev.off()
RF_pam_multi_morbid=pam(RF_proximity_measure_multi_morbid_res, 2)
saveRDS(RF_pam_multi_morbid,"../results/results_joel_HPC/RF_pam_ordinal_factors/RF_pam_ordinal_factors_multi_morbid.rds")
clusters_RF_pam_multi_morbid=RF_pam_multi_morbid$clustering
RF_pam_multi_morbid_plot_d12=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_RF_pam_multi_morbid,
dims=c(1,2),
custom_theme=theme_jh,color_scale=distinct_scale)
RF_pam_multi_morbid_plot_d34=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_RF_pam_multi_morbid,
dims=c(3,4),
custom_theme=theme_jh,color_scale=distinct_scale)
svg(filename="../results/results_joel_HPC/RF_pam_ordinal_factors/RF_pam_ordinal_factors_multi_morbid_plot_d12.svg",width=10,height=10)
print(RF_pam_multi_morbid_plot_d12)
dev.off()
svg(filename="../results/results_joel_HPC/RF_pam_ordinal_factors/RF_pam_ordinal_factors_multi_morbid_plot_d34.svg",width=10,height=10)
print(RF_pam_multi_morbid_plot_d34)
dev.off()
cat_variables=colnames(multi_morbid)[sapply(multi_morbid,class) == "factor"]
cont_variables=colnames(multi_morbid)[sapply(multi_morbid,class) != "factor"]
cont_variables=cont_variables[2:length(cont_variables)]
RF_pam_mean_by_cluster_continuous_plot=mean_by_cluster_continuous(data=multi_morbid[,cont_variables],
classes=as.factor(clusters_RF_pam_multi_morbid),
color_scale=NULL,custom_theme=theme_jh,title=NULL)
svg(filename="../results/results_joel_HPC/RF_pam_ordinal_factors/RF_pam_multi_ordinal_factors_morbid_mean_by_cluster_continuous_plot.svg",width=10,height=10)
print(RF_pam_mean_by_cluster_continuous_plot)
dev.off()
cat_variables=colnames(multi_morbid)[sapply(sapply(multi_morbid,class),function(x) {x[[1]]}) == "factor" |
sapply(sapply(multi_morbid,class),function(x) {x[[1]]}) == "ordered"]
cont_variables=colnames(multi_morbid)[sapply(multi_morbid,class) == "numeric"]
RF_pam_mean_by_cluster_continuous_plot=mean_by_cluster_continuous(data=multi_morbid[,cont_variables],
classes=as.factor(clusters_RF_pam_multi_morbid),
color_scale=NULL,custom_theme=theme_jh,title=NULL)
svg(filename="../results/results_joel_HPC/RF_pam_ordinal_factors/RF_pam_multi_ordinal_factors_morbid_mean_by_cluster_continuous_plot.svg",width=10,height=10)
print(RF_pam_mean_by_cluster_continuous_plot)
dev.off()
cat_variables_split=splitIndices(nx=length(cat_variables), ncl=ceiling(length(cat_variables) / 9))
for (k in 1:length(cat_variables_split)) {
RF_pam_cat_distribution_by_cluster=cat_distribution_by_cluster(data=multi_morbid[,cat_variables[cat_variables_split[[k]]]],
classes=as.factor(clusters_RF_pam_multi_morbid),layout=c(3,3),
color_scale=NULL,custom_theme=theme_jh,
title=paste0("Distributions of categorical variables by classes (",
k,"/",length(cat_variables_split),")"))
svg(filename=paste0("../results/results_joel_HPC/RF_pam_ordinal_factors/RF_pam_ordinal_factors_multi_morbid_cat_distribution_by_cluster_",k,"_",length(cat_variables_split),".svg"),
width=10,height=10)
grid.draw(RF_pam_cat_distribution_by_cluster)
dev.off()
}
multi_morbid=readRDS("../data/processed/multi_morbid_ordinal_continuous.rds")
multi_morbid=readRDS("../data/processed/multi_morbid_ordinal_continuous.rds")
head(multi_morbid)
sapply(multi_morbid,class)
using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
using("mixOmics","doParallel","abind")
############################################################
# Setting wd
############################################################
setwd("C:/Users/JOE/Documents/Imperial College 2018-2019/Computational Epidemiology/Comp_Epi_Project")
source("Comp_Epi_utility/functions_mod_joel.R")
#Exposure
exposures=readRDS("Data/Exposures_imputed_final_all.rds")
head(exposures)
#proteins
proteins=readRDS("Data/Proteins_denoised_multivariate_light_imp.rds")
############################################################
# Matching the proteins data we have to the exposures
############################################################
proteins=proteins[(rownames(proteins) %in% exposures$subjectidp),]
exposures_proteins=exposures[exposures$subjectidp%in%rownames(proteins),]
#proteins are all good
print(sum(is.na(proteins)))
exposures_proteins[,3:ncol(exposures_proteins)]=scale(exposures_proteins[,3:ncol(exposures_proteins)])
proteins=scale(proteins)
#Exposure
exposures=readRDS("Exposures_imputed_final_all.rds")
head(exposures)
#proteins
proteins=readRDS("Proteins_denoised_multivariate_light_imp.rds")
############################################################
# Matching the proteins data we have to the exposures
############################################################
proteins=proteins[(rownames(proteins) %in% exposures$subjectidp),]
exposures_proteins=exposures[exposures$subjectidp%in%rownames(proteins),]
#proteins are all good
print(sum(is.na(proteins)))
exposures_proteins[,3:ncol(exposures_proteins)]=scale(exposures_proteins[,3:ncol(exposures_proteins)])
proteins=scale(proteins)
# Calibrate the sPLS on X
SummarysPLSOnX_joel_proteins_light_imp=PerfSparseOnX_joel(exposures_proteins[,3:ncol(exposures_proteins)], proteins, niter=10)
SummarysPLSOnX_joel_proteins_light_imp
using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
using("FactoMineR","parallel","clusterCrit","reshape2","magrittr","gridExtra","grid","dplyr","parallel","clusterCrit")
multi_morbid=readRDS("../data/processed/multi_morbid_ordinal_continuous.rds")
setwd("C:/Users/JOE/Documents/Imperial College 2018-2019/Translational Data Science/Barracudas")
multi_morbid=readRDS("../data/processed/multi_morbid_ordinal_continuous.rds")
source("code/utility_functions/FAMD_plots_utility.R")
source("code/utility_functions/colors_themes_utility.R")
source("code/utility_functions/clustering_utility.R")
FAMD_multi_morbid_res=readRDS("../data/processed/FAMD_ordinal_continuous_multi_morbid_res.rds")
nb_comp_FAMD_multi_morbid=which(FAMD_multi_morbid_res$eig[,3] > 80)[1]
FAMD_kmeans_multi_morbid=kmeans(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],centers=3)
clusters_FAMD_kmeans_multi_morbid=FAMD_kmeans_multi_morbid$cluster
FAMD_kmeans_multi_morbid_plot_d12=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_FAMD_kmeans_multi_morbid,
dims=c(1,2),
custom_theme=theme_jh,color_scale=distinct_scale,show_labels = FALSE)
FAMD_kmeans_multi_morbid_plot_d34=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_FAMD_kmeans_multi_morbid,
dims=c(3,4),
custom_theme=theme_jh,color_scale=distinct_scale,show_labels = FALSE)
FAMD_kmeans_multi_morbid_plot_d12
cat_variables=colnames(multi_morbid)[sapply(multi_morbid,class) == "factor"]
cont_variables=colnames(multi_morbid)[sapply(multi_morbid,class) != "factor"]
cont_variables=cont_variables[2:length(cont_variables)]
FAMD_kmeans_mean_by_cluster_continuous_plot=mean_by_cluster_continuous(data=multi_morbid[,cont_variables],
classes=as.factor(clusters_FAMD_kmeans_multi_morbid),
color_scale=NULL,custom_theme=theme_jh,title=NULL)
multi_morbid=readRDS("../data/processed/multi_morbid_ordinal_continuous.rds")
multi_morbid=multi_morbid[1:200,]
cat_variables=colnames(multi_morbid)[sapply(multi_morbid,class) == "factor"]
cont_variables=colnames(multi_morbid)[sapply(multi_morbid,class) != "factor"]
cont_variables=cont_variables[2:length(cont_variables)]
FAMD_kmeans_mean_by_cluster_continuous_plot=mean_by_cluster_continuous(data=multi_morbid[,cont_variables],
classes=as.factor(clusters_FAMD_kmeans_multi_morbid),
color_scale=NULL,custom_theme=theme_jh,title=NULL)
FAMD_kmeans_mean_by_cluster_continuous_plot
cat_variables_split=splitIndices(nx=length(cat_variables), ncl=ceiling(length(cat_variables) / 9))
k=1
FAMD_kmeans_cat_distribution_by_cluster=cat_distribution_by_cluster(data=multi_morbid[,cat_variables[cat_variables_split[[k]]]],
classes=as.factor(clusters_FAMD_kmeans_multi_morbid),layout=c(3,3),
color_scale=NULL,custom_theme=theme_jh,
title=paste0("Distributions of categorical variables by classes (",
k,"/",length(cat_variables_split),")"))
FAMD_kmeans_cat_distribution_by_cluster
cont_variables_split=splitIndices(nx=length(cont_variables), ncl=ceiling(length(cont_variables) / 9))
k
FAMD_kmeans_cont_distribution_by_cluster=cont_distribution_by_cluster(data=multi_morbid[,cont_variables[cont_variables_split[[k]]]],
classes=as.factor(clusters_FAMD_kmeans_multi_morbid),layout=c(3,3),
color_scale=NULL,custom_theme=theme_jh,
title=paste0("Distributions of continuous variables by classes (",
k,"/",length(cont_variables_split),")"))
FAMD_kmeans_cont_distribution_by_cluster
View(exposures_proteins)
X=exposures_proteins[,3:ncol(exposures_proteins)]
Y=proteins
NVarX=NULL
NvarY=NULL
NIter=100
times_selected_VarX=rep(0,ncol(X))
times_selected_VarY=rep(0,ncol(Y))
library(caret)
createFolds()
?createFolds
?sample
resampled_rows=sample(1:nrow(X),nrow(X),replace=TRUE)
resampled_rows
resampled_rows=sample(1:nrow(X),nrow(X),replace=TRUE)
X_resampled=X[resampled_rows,]
Y_resampled=Y[resampled_rows,]
k
?spls
resampled_spls_res=mixOmics::spls(X,Y,keepX=NVarX,keepY=NVarY,mode=c("regression"))
if (!is.null(chosen_seed)) {
set.seed(chosen_seed)
}
if (is.null(NVarX)) {
NVarX=ncol(X)
}
if (is.null(NVarY)) {
NVarY=ncol(Y)
}
X=exposures_proteins[,3:ncol(exposures_proteins)]
Y=proteins
NVarX=NULL
NVarY=NULL
NIter=100
if (!is.null(chosen_seed)) {
set.seed(chosen_seed)
}
if (is.null(NVarX)) {
NVarX=ncol(X)
}
if (is.null(NVarY)) {
NVarY=ncol(Y)
}
chosen_seed=NULL
if (!is.null(chosen_seed)) {
set.seed(chosen_seed)
}
if (is.null(NVarX)) {
NVarX=ncol(X)
}
if (is.null(NVarY)) {
NVarY=ncol(Y)
}
resampled_rows=sample(1:nrow(X),nrow(X),replace=TRUE)
X_resampled=X[resampled_rows,]
Y_resampled=Y[resampled_rows,]
resampled_spls_res=mixOmics::spls(X,Y,keepX=NVarX,keepY=NVarY,mode=c("regression"))
resampled_spls_res
resampled_spls_res$keepX
resampled_spls_res$keepY
resampled_spls_res$loadings
NVarX=3
NVarY=7
resampled_spls_res=mixOmics::spls(X,Y,keepX=NVarX,keepY=NVarY,mode=c("regression"))
resampled_spls_res
resampled_spls_res$loadings
resampled_spls_res=mixOmics::spls(X,Y,keepX=NVarX,keepY=NVarY,mode=c("regression"),comp=1)
resampled_spls_res=mixOmics::spls(X,Y,keepX=NVarX,keepY=NVarY,mode=c("regression"),ncomp=1)
resampled_spls_res
resampled_spls_res$loadings
resampled_spls_res$loadings$X
resampled_spls_res$loadings$X[,1]
resampled_spls_res$loadings$X[,1] !=0
as.numeric( resampled_spls_res$loadings$X[,1] !=0)
times_selected_VarX + as.numeric( resampled_spls_res$loadings$X[,1]!=0)
if (!is.null(chosen_seed)) {
set.seed(chosen_seed)
}
if (is.null(NVarX)) {
NVarX=ncol(X)
}
if (is.null(NVarY)) {
NVarY=ncol(Y)
}
times_selected_VarX=rep(0,ncol(X))
times_selected_VarY=rep(0,ncol(Y))
for (k in 1:NIter) {
resampled_rows=sample(1:nrow(X),nrow(X),replace=TRUE)
X_resampled=X[resampled_rows,]
Y_resampled=Y[resampled_rows,]
resampled_spls_res=mixOmics::spls(X,Y,keepX=NVarX,keepY=NVarY,mode=c("regression"),ncomp=1)
times_selected_VarX=times_selected_VarX + as.numeric( resampled_spls_res$loadings$X[,1]!=0)
times_selected_VarY=times_selected_VarY + as.numeric( resampled_spls_res$loadings$Y[,1]!=0)
}
times_selected_VarX
times_selected_VarY
resampled_rows=sample(1:nrow(X),nrow(X),replace=TRUE)
X_resampled=X[resampled_rows,]
Y_resampled=Y[resampled_rows,]
resampled_spls_res=mixOmics::spls(X_resampled,Y_resampled,keepX=NVarX,keepY=NVarY,mode=c("regression"),ncomp=1)
times_selected_VarX=times_selected_VarX + as.numeric( resampled_spls_res$loadings$X[,1]!=0)
times_selected_VarY=times_selected_VarY + as.numeric( resampled_spls_res$loadings$Y[,1]!=0)
if (!is.null(chosen_seed)) {
set.seed(chosen_seed)
}
if (is.null(NVarX)) {
NVarX=ncol(X)
}
if (is.null(NVarY)) {
NVarY=ncol(Y)
}
times_selected_VarX=rep(0,ncol(X))
times_selected_VarY=rep(0,ncol(Y))
for (k in 1:NIter) {
resampled_rows=sample(1:nrow(X),nrow(X),replace=TRUE)
X_resampled=X[resampled_rows,]
Y_resampled=Y[resampled_rows,]
resampled_spls_res=mixOmics::spls(X_resampled,Y_resampled,keepX=NVarX,keepY=NVarY,mode=c("regression"),ncomp=1)
times_selected_VarX=times_selected_VarX + as.numeric( resampled_spls_res$loadings$X[,1]!=0)
times_selected_VarY=times_selected_VarY + as.numeric( resampled_spls_res$loadings$Y[,1]!=0)
}
times_selected_VarX
times_selected_VarY
sPLS_stability_analysis=function(X, Y,NVarX=NULL,NVarY=NULL,NIter=100,chosen_seed=NULL) {
if (!is.null(chosen_seed)) {
set.seed(chosen_seed)
}
if (is.null(NVarX)) {
NVarX=ncol(X)
}
if (is.null(NVarY)) {
NVarY=ncol(Y)
}
times_selected_VarX=rep(0,ncol(X))
times_selected_VarY=rep(0,ncol(Y))
for (k in 1:NIter) {
resampled_rows=sample(1:nrow(X),nrow(X),replace=TRUE)
X_resampled=X[resampled_rows,]
Y_resampled=Y[resampled_rows,]
resampled_spls_res=mixOmics::spls(X_resampled,Y_resampled,keepX=NVarX,keepY=NVarY,mode=c("regression"),ncomp=1)
times_selected_VarX=times_selected_VarX + as.numeric( resampled_spls_res$loadings$X[,1]!=0)
times_selected_VarY=times_selected_VarY + as.numeric( resampled_spls_res$loadings$Y[,1]!=0)
}
return(list(times_selected_VarX=times_selected_VarX,times_selected_VarY=times_selected_VarY))
}
sPLS_stability_analysis(X, Y,NVarX=3,NVarY=7,NIter=100,chosen_seed=NULL)
p = plot(1:10,1:10)
p
?recordPlot
p <- recordPlot()
p <- recordPlot()
plot(1:10,1:10)
p
p
test=sPLS_stability_analysis(X, Y,NVarX=3,NVarY=7,NIter=100,chosen_seed=NULL)
sPLS_stability_analysis=function(X, Y,NVarX=NULL,NVarY=NULL,NIter=100,chosen_seed=NULL) {
if (!is.null(chosen_seed)) {
set.seed(chosen_seed)
}
if (is.null(NVarX)) {
NVarX=ncol(X)
}
if (is.null(NVarY)) {
NVarY=ncol(Y)
}
times_selected_VarX=rep(0,ncol(X))
times_selected_VarY=rep(0,ncol(Y))
for (k in 1:NIter) {
resampled_rows=sample(1:nrow(X),nrow(X),replace=TRUE)
X_resampled=X[resampled_rows,]
Y_resampled=Y[resampled_rows,]
resampled_spls_res=mixOmics::spls(X_resampled,Y_resampled,keepX=NVarX,keepY=NVarY,mode=c("regression"),ncomp=1)
times_selected_VarX=times_selected_VarX + as.numeric( resampled_spls_res$loadings$X[,1]!=0)
times_selected_VarY=times_selected_VarY + as.numeric( resampled_spls_res$loadings$Y[,1]!=0)
}
names(times_selected_VarX)=colnames(X)
names(times_selected_VarY)=colnames(Y)
return(list(times_selected_VarX=times_selected_VarX,times_selected_VarY=times_selected_VarY))
}
test=sPLS_stability_analysis(X, Y,NVarX=3,NVarY=7,NIter=100,chosen_seed=NULL)
test
sPLS_stability_analysis=function(X, Y,NVarX=NULL,NVarY=NULL,NIter=100,chosen_seed=NULL,stability_on="X") {
if (!is.null(chosen_seed)) {
set.seed(chosen_seed)
}
if (is.null(NVarX)) {
NVarX=ncol(X)
}
if (is.null(NVarY)) {
NVarY=ncol(Y)
}
if (stability_on=="X" || stability_on=="XY") {
times_selected_VarX=rep(0,ncol(X))
}
if (stability_on=="Y" || stability_on=="XY") {
times_selected_VarY=rep(0,ncol(Y))
}
for (k in 1:NIter) {
resampled_rows=sample(1:nrow(X),nrow(X),replace=TRUE)
X_resampled=X[resampled_rows,]
Y_resampled=Y[resampled_rows,]
resampled_spls_res=mixOmics::spls(X_resampled,Y_resampled,keepX=NVarX,keepY=NVarY,mode=c("regression"),ncomp=1)
if (stability_on=="X" || stability_on=="XY") {
times_selected_VarX=times_selected_VarX + as.numeric( resampled_spls_res$loadings$X[,1]!=0)
}
if (stability_on=="Y" || stability_on=="XY") {
times_selected_VarY=times_selected_VarY + as.numeric( resampled_spls_res$loadings$Y[,1]!=0)
}
}
names(times_selected_VarX)=colnames(X)
names(times_selected_VarY)=colnames(Y)
if (stability_on=="X") {
return(list(times_selected_VarX=times_selected_VarX))
} else if (stability_on=="Y") {
return(list(times_selected_VarY=times_selected_VarY))
} else if (stability_on=="XY") {
return(list(times_selected_VarX=times_selected_VarX,times_selected_VarY=times_selected_VarY))
}
}
test=sPLS_stability_analysis(X, Y,NVarX=3,NVarY=7,NIter=100,chosen_seed=NULL,stability_on = "X")
test
test=sPLS_stability_analysis(X, Y,NVarX=3,NVarY=7,NIter=100,chosen_seed=NULL,stability_on = "Y")
test
test=sPLS_stability_analysis(X, Y,NVarX=3,NVarY=7,NIter=100,chosen_seed=NULL,stability_on = "XY")
test
stability_plot_data=data.frame(variable_names=names(sPLS_stability_res),times_selected=sPLS_stability_res)
test=sPLS_stability_analysis(X, Y,NVarX=3,NVarY=7,NIter=100,chosen_seed=NULL,stability_on = "X")
sPLS_stability_res=test
custom_theme=NULL
color_scale=NULL
stability_on="X"
sPLS_stability_res
sPLS_stability_analysis=function(X, Y,NVarX=NULL,NVarY=NULL,NIter=100,chosen_seed=NULL,stability_on="X") {
if (!is.null(chosen_seed)) {
set.seed(chosen_seed)
}
if (is.null(NVarX)) {
NVarX=ncol(X)
}
if (is.null(NVarY)) {
NVarY=ncol(Y)
}
if (stability_on=="X" || stability_on=="XY") {
times_selected_VarX=rep(0,ncol(X))
}
if (stability_on=="Y" || stability_on=="XY") {
times_selected_VarY=rep(0,ncol(Y))
}
for (k in 1:NIter) {
resampled_rows=sample(1:nrow(X),nrow(X),replace=TRUE)
X_resampled=X[resampled_rows,]
Y_resampled=Y[resampled_rows,]
resampled_spls_res=mixOmics::spls(X_resampled,Y_resampled,keepX=NVarX,keepY=NVarY,mode=c("regression"),ncomp=1)
if (stability_on=="X" || stability_on=="XY") {
times_selected_VarX=times_selected_VarX + as.numeric( resampled_spls_res$loadings$X[,1]!=0)
}
if (stability_on=="Y" || stability_on=="XY") {
times_selected_VarY=times_selected_VarY + as.numeric( resampled_spls_res$loadings$Y[,1]!=0)
}
}
names(times_selected_VarX)=colnames(X)
names(times_selected_VarY)=colnames(Y)
if (stability_on=="X") {
return(list(X=times_selected_VarX))
} else if (stability_on=="Y") {
return(list(Y=times_selected_VarY))
} else if (stability_on=="XY") {
return(list(X=times_selected_VarX,Y=times_selected_VarY))
}
}
sPLS_stability_analysis=function(X, Y,NVarX=NULL,NVarY=NULL,NIter=100,chosen_seed=NULL,stability_on="X") {
if (!is.null(chosen_seed)) {
set.seed(chosen_seed)
}
if (is.null(NVarX)) {
NVarX=ncol(X)
}
if (is.null(NVarY)) {
NVarY=ncol(Y)
}
if (stability_on=="X" || stability_on=="XY") {
times_selected_VarX=rep(0,ncol(X))
}
if (stability_on=="Y" || stability_on=="XY") {
times_selected_VarY=rep(0,ncol(Y))
}
for (k in 1:NIter) {
resampled_rows=sample(1:nrow(X),nrow(X),replace=TRUE)
X_resampled=X[resampled_rows,]
Y_resampled=Y[resampled_rows,]
resampled_spls_res=mixOmics::spls(X_resampled,Y_resampled,keepX=NVarX,keepY=NVarY,mode=c("regression"),ncomp=1)
if (stability_on=="X" || stability_on=="XY") {
times_selected_VarX=times_selected_VarX + as.numeric( resampled_spls_res$loadings$X[,1]!=0)
}
if (stability_on=="Y" || stability_on=="XY") {
times_selected_VarY=times_selected_VarY + as.numeric( resampled_spls_res$loadings$Y[,1]!=0)
}
}
names(times_selected_VarX)=colnames(X)
names(times_selected_VarY)=colnames(Y)
if (stability_on=="X") {
return(list(X=times_selected_VarX,NVarX=NVarX,NIter=NIter))
} else if (stability_on=="Y") {
return(list(Y=times_selected_VarY,NVarY=NVarY,NIter=NIter))
} else if (stability_on=="XY") {
return(list(X=times_selected_VarX,Y=times_selected_VarY,NVarX=NVarX,NVarY=NVarY,NIter=NIter))
}
}
test=sPLS_stability_analysis(X, Y,NVarX=3,NVarY=7,NIter=100,chosen_seed=NULL,stability_on = "X")
test
sPLS_stability_res=test
custom_theme=NULL
color_scale=NULL
stability_on="X"
if (stability_on=="X") {
stability_plot_data=data.frame(variable_names=names(sPLS_stability_res$X),times_selected=sPLS_stability_res)
}
stability_plot_data=data.frame(variable_names=names(sPLS_stability_res$X),times_selected=sPLS_stability_res)
stability_plot_data
if (stability_on=="X") {
stability_plot_data=data.frame(variable_names=names(sPLS_stability_res$X),times_selected=sPLS_stability_res$X)
}
stability_plot_data
stability_plot=ggplot(stability_plot_data) + geom_bar(aes(x=variable_names,y=times_selected),stat="identity",position="dodge")
x11()
print(stability_plot)
stability_plot=ggplot(stability_plot_data) + geom_bar(aes(x=variable_names,y=times_selected),stat="identity",position="dodge",width=0.2)
x11()
print(stability_plot)
stability_plot=ggplot(stability_plot_data) + geom_bar(aes(x=variable_names,y=times_selected),stat="identity",position="dodge",width=0.2) +
ylim(c(0,sPLS_stability_res$NIter)) + geom_hline(yintercept = sPLS_stability_res$NIter,color="red")
x11()
print(stability_plot)
