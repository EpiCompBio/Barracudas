}
sPLS_stability_analysis_plot_big_dataset(sPLS_stability_analysis_OnX_proteins_light_imp,
custom_theme=theme_jh,color_scale=distinct_scale,stability_on="X")
sPLS_stability_analysis_plot_big_dataset=function(sPLS_stability_res,custom_theme=NULL,color_scale=NULL,stability_on="X") {
if (stability_on=="X" | stability_on=="XY") {
histogram_plot_data_X=data.frame(proportions=sPLS_stability_res$X / sPLS_stability_res$NIter)
if (!is.null(color_scale)) {
histogram_plot_X=ggplot(histogram_plot_data_X) + geom_histogram(aes(x=proportions),fill=color_scale[1])
} else {
histogram_plot_X=ggplot(histogram_plot_data_X) + geom_histogram(aes(x=proportions))
}
histogram_plot_X = histogram_plot_X + xlim(c(0,1)) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black")
}
if (stability_on=="Y" | stability_on=="XY") {
histogram_plot_data_Y=data.frame(proportions=sPLS_stability_res$Y / sPLS_stability_res$NIter)
if (!is.null(color_scale)) {
histogram_plot_Y=ggplot(histogram_plot_data_Y) + geom_histogram(aes(x=proportions),fill=color_scale[1])
} else {
histogram_plot_Y=ggplot(histogram_plot_data_Y) + geom_histogram(aes(x=proportions))
}
histogram_plot_Y = histogram_plot_Y + xlim(c(0,1)) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarY/length(sPLS_stability_res$Y)),size=1,color="black")
}
if (stability_on=="X") {
return(histogram_plot_X)
} else if (stability_on=="Y") {
return(histogram_plot_Y)
} else if (stability_on=="XY") {
return(list(histogram_plot_X=histogram_plot_X,histogram_plot_Y=histogram_plot_Y))
}
}
sPLS_stability_analysis_plot_big_dataset(sPLS_stability_analysis_OnX_proteins_light_imp,
custom_theme=theme_jh,color_scale=distinct_scale,stability_on="X")
pdf("Proteins_plots/sPLS_stability_analysis_plot2_OnX_proteins_light_imp.pdf")
print(sPLS_stability_analysis_plot2_OnX_proteins_light_imp)
dev.off()
x11()
print(sPLS_stability_analysis_plot2_OnX_proteins_light_imp)
sPLS_stability_analysis_plot2_OnX_proteins_light_imp=sPLS_stability_analysis_plot_big_dataset(sPLS_stability_analysis_OnX_proteins_light_imp,
custom_theme=theme_jh,color_scale=distinct_scale,stability_on="X")
pdf("Proteins_plots/sPLS_stability_analysis_plot2_OnX_proteins_light_imp.pdf")
print(sPLS_stability_analysis_plot2_OnX_proteins_light_imp)
dev.off()
x11()
print(sPLS_stability_analysis_plot2_OnX_proteins_light_imp)
sPLS_stability_analysis_plot_big_dataset=function(sPLS_stability_res,custom_theme=NULL,color_scale=NULL,stability_on="X") {
if (stability_on=="X" | stability_on=="XY") {
histogram_plot_data_X=data.frame(proportions=sPLS_stability_res$X / sPLS_stability_res$NIter)
if (!is.null(color_scale)) {
histogram_plot_X=ggplot(histogram_plot_data_X) + geom_histogram(aes(x=proportions),fill=color_scale[1],color="black")
} else {
histogram_plot_X=ggplot(histogram_plot_data_X) + geom_histogram(aes(x=proportions))
}
histogram_plot_X = histogram_plot_X + xlim(c(0,1)) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black")
}
if (stability_on=="Y" | stability_on=="XY") {
histogram_plot_data_Y=data.frame(proportions=sPLS_stability_res$Y / sPLS_stability_res$NIter)
if (!is.null(color_scale)) {
histogram_plot_Y=ggplot(histogram_plot_data_Y) + geom_histogram(aes(x=proportions),fill=color_scale[1])
} else {
histogram_plot_Y=ggplot(histogram_plot_data_Y) + geom_histogram(aes(x=proportions))
}
histogram_plot_Y = histogram_plot_Y + xlim(c(0,1)) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarY/length(sPLS_stability_res$Y)),size=1,color="black")
}
if (stability_on=="X") {
return(histogram_plot_X)
} else if (stability_on=="Y") {
return(histogram_plot_Y)
} else if (stability_on=="XY") {
return(list(histogram_plot_X=histogram_plot_X,histogram_plot_Y=histogram_plot_Y))
}
}
sPLS_stability_analysis_plot2_OnX_proteins_light_imp=sPLS_stability_analysis_plot_big_dataset(sPLS_stability_analysis_OnX_proteins_light_imp,
custom_theme=theme_jh,color_scale=distinct_scale,stability_on="X")
pdf("Proteins_plots/sPLS_stability_analysis_plot2_OnX_proteins_light_imp.pdf")
print(sPLS_stability_analysis_plot2_OnX_proteins_light_imp)
dev.off()
x11()
print(sPLS_stability_analysis_plot2_OnX_proteins_light_imp)
sPLS_stability_res=sPLS_stability_analysis_OnX_proteins_light_imp
custom_theme=theme_jh
color_scale=distinct_scale
stability_on="X"
histogram_plot_data_X=data.frame(proportions=sPLS_stability_res$X / sPLS_stability_res$NIter)
histogram_plot_data_X
?geom_histogram
histogram_plot_data_X=data.frame(proportions=sPLS_stability_res$X / sPLS_stability_res$NIter)
histogram_plot_X=ggplot(histogram_plot_data_X) + geom_histogram(aes(x=proportions),fill=color_scale[1],color="black")
print(histogram_plot_X)
histogram_plot_X
histogram_plot_X = histogram_plot_X + xlim(c(0,1))
histogram_plot_X
histogram_plot_X = histogram_plot_X + xlim(c(-0.5,1.5)) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black")
histogram_plot_X
?xlim
histogram_plot_X = histogram_plot_X + xlim(0,1) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black")
histogram_plot_X
histogram_plot_X = histogram_plot_X + scale_x_continuous(limits=c(0,1),expand=c(0,0))+ custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black")
histogram_plot_X
histogram_plot_X = histogram_plot_X + scale_x_continuous(limits=c(0,1),expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black")
histogram_plot_X
histogram_plot_X = histogram_plot_X + scale_x_continuous(limits=c(0,1),expand=c(0,0)) +
scale_y_continuous(expand=c(0,1)) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black")
histogram_plot_X
histogram_plot_X = histogram_plot_X + scale_x_continuous(limits=c(0,1),expand=c(0,0)) +
scale_y_continuous(expand=c(1,0)) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black")
print(histogram_plot_X)
histogram_plot_X=ggplot(histogram_plot_data_X) + geom_histogram(aes(x=proportions),fill=color_scale[1],color="black")
histogram_plot_X = histogram_plot_X + scale_x_continuous(limits=c(0,1),expand=c(0,0)) +
scale_y_continuous(expand=c(1,0)) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black")
print(histogram_plot_X)
histogram_plot_X = histogram_plot_X + scale_x_continuous(limits=c(0,1),expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black")
print(histogram_plot_X)
?expand_scale
histogram_plot_X = histogram_plot_X + scale_x_continuous(limits=c(0,1),expand=c(0,0)) +
scale_y_continuous(expand=expand_scale(mult = c(0, .1))) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black")
print(histogram_plot_X
)
graphics.off()
sPLS_stability_analysis_plot_big_dataset=function(sPLS_stability_res,custom_theme=NULL,color_scale=NULL,stability_on="X") {
if (stability_on=="X" | stability_on=="XY") {
histogram_plot_data_X=data.frame(proportions=sPLS_stability_res$X / sPLS_stability_res$NIter)
if (!is.null(color_scale)) {
histogram_plot_X=ggplot(histogram_plot_data_X) + geom_histogram(aes(x=proportions),fill=color_scale[1],color="black")
} else {
histogram_plot_X=ggplot(histogram_plot_data_X) + geom_histogram(aes(x=proportions))
}
histogram_plot_X = histogram_plot_X + scale_x_continuous(limits=c(0,1),expand=c(0,0)) +
scale_y_continuous(expand=expand_scale(mult = c(0, .1))) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black")
}
if (stability_on=="Y" | stability_on=="XY") {
histogram_plot_data_Y=data.frame(proportions=sPLS_stability_res$Y / sPLS_stability_res$NIter)
if (!is.null(color_scale)) {
histogram_plot_Y=ggplot(histogram_plot_data_Y) + geom_histogram(aes(x=proportions),fill=color_scale[1])
} else {
histogram_plot_Y=ggplot(histogram_plot_data_Y) + geom_histogram(aes(x=proportions))
}
histogram_plot_Y = histogram_plot_Y + scale_x_continuous(limits=c(0,1),expand=c(0,0)) +
scale_y_continuous(expand=expand_scale(mult = c(0, .1))) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarY/length(sPLS_stability_res$Y)),size=1,color="black")
}
if (stability_on=="X") {
return(histogram_plot_X)
} else if (stability_on=="Y") {
return(histogram_plot_Y)
} else if (stability_on=="XY") {
return(list(histogram_plot_X=histogram_plot_X,histogram_plot_Y=histogram_plot_Y))
}
}
sPLS_stability_analysis_plot2_OnX_proteins_light_imp
sPLS_stability_analysis_plot2_OnX_proteins_light_imp=sPLS_stability_analysis_plot_big_dataset(sPLS_stability_analysis_OnX_proteins_light_imp,
custom_theme=theme_jh,color_scale=distinct_scale,stability_on="X")
sPLS_stability_analysis_plot2_OnX_proteins_light_imp
sPLS_stability_analysis_plot2_OnX_proteins_light_imp=sPLS_stability_analysis_plot_big_dataset(sPLS_stability_analysis_OnX_proteins_light_imp,
custom_theme=theme_jh,color_scale=distinct_scale,stability_on="X")
pdf("Proteins_plots/sPLS_stability_analysis_plot2_OnX_proteins_light_imp.pdf")
print(sPLS_stability_analysis_plot2_OnX_proteins_light_imp)
dev.off()
x11()
print(sPLS_stability_analysis_plot2_OnX_proteins_light_imp)
pdf("Proteins_plots/sPLS_stability_analysis_plot2_OnY_proteins_light_imp.pdf")
print(sPLS_stability_analysis_plot2_OnY_proteins_light_imp)
dev.off()
x11()
print(sPLS_stability_analysis_plot2_OnY_proteins_light_imp)
sPLS_stability_analysis_plot2_OnY_proteins_light_imp=sPLS_stability_analysis_plot_big_dataset(sPLS_stability_analysis_OnY_proteins_light_imp,
custom_theme=theme_jh,color_scale=distinct_scale,stability_on="Y")
pdf("Proteins_plots/sPLS_stability_analysis_plot2_OnY_proteins_light_imp.pdf")
print(sPLS_stability_analysis_plot2_OnY_proteins_light_imp)
dev.off()
x11()
print(sPLS_stability_analysis_plot2_OnY_proteins_light_imp)
sPLS_stability_res=sPLS_stability_analysis_OnY_proteins_light_imp
custom_theme=theme_jh
color_scale=distinct_scale
stability_on="Y"
histogram_plot_data_Y=data.frame(proportions=sPLS_stability_res$Y / sPLS_stability_res$NIter)
histogram_plot_data_Y
histogram_plot_Y = histogram_plot_Y + scale_x_continuous(limits=c(0,1),expand=c(0,0)) +
scale_y_continuous(expand=expand_scale(mult = c(0, .1))) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarY/length(sPLS_stability_res$Y)),size=1,color="black")
histogram_plot_Y
histogram_plot_data_Y=data.frame(proportions=sPLS_stability_res$Y / sPLS_stability_res$NIter)
if (!is.null(color_scale)) {
histogram_plot_Y=ggplot(histogram_plot_data_Y) + geom_histogram(aes(x=proportions),fill=color_scale[1])
} else {
histogram_plot_Y=ggplot(histogram_plot_data_Y) + geom_histogram(aes(x=proportions))
}
histogram_plot_Y = histogram_plot_Y + scale_x_continuous(limits=c(0,1.1),expand=c(0,0)) +
scale_y_continuous(expand=expand_scale(mult = c(0, .1))) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarY/length(sPLS_stability_res$Y)),size=1,color="black")
histogram_plot_Y
histogram_plot_X = histogram_plot_X + scale_x_continuous(limits=c(0,1),expand=c(0,0)) +
scale_y_continuous(expand=expand_scale(mult = c(0, .1))) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black") +
ggtitle(paste0("Histogram of selection proportions of X variables for an sPLS with ",
sPLS_stability_res$NVarY/length(sPLS_stability_res$Y)," % variables selected"))
histogram_plot_X
histogram_plot_X = histogram_plot_X + scale_x_continuous(limits=c(0,1),expand=c(0,0)) +
scale_y_continuous(expand=expand_scale(mult = c(0, .1))) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black") +
ggtitle(paste0("Histogram of selection proportions of X variables\n for an sPLS with ",
sPLS_stability_res$NVarY/length(sPLS_stability_res$Y)," % variables selected"))
histogram_plot_X
sPLS_stability_res$NVarY
sPLS_stability_res$Y
histogram_plot_X = histogram_plot_X + scale_x_continuous(limits=c(0,1),expand=c(0,0)) +
scale_y_continuous(expand=expand_scale(mult = c(0, .1))) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black") +
ggtitle(paste0("Histogram of selection proportions of X variables\n for an sPLS with ",
sPLS_stability_res$NVarY/length(sPLS_stability_res$Y)*100," % variables selected"))
histogram_plot_X
sPLS_stability_analysis_plot_big_dataset=function(sPLS_stability_res,custom_theme=NULL,color_scale=NULL,stability_on="X") {
if (stability_on=="X" | stability_on=="XY") {
histogram_plot_data_X=data.frame(proportions=sPLS_stability_res$X / sPLS_stability_res$NIter)
if (!is.null(color_scale)) {
histogram_plot_X=ggplot(histogram_plot_data_X) + geom_histogram(aes(x=proportions),fill=color_scale[1],color="black")
} else {
histogram_plot_X=ggplot(histogram_plot_data_X) + geom_histogram(aes(x=proportions))
}
histogram_plot_X = histogram_plot_X + scale_x_continuous(limits=c(0,1),expand=c(0,0)) +
scale_y_continuous(expand=expand_scale(mult = c(0, .1))) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarX/length(sPLS_stability_res$X)),size=1,color="black") +
ggtitle(paste0("Histogram of selection proportions of X variables\n for an sPLS with ",
sPLS_stability_res$NVarX/length(sPLS_stability_res$X)*100," % of variables selected"))
}
if (stability_on=="Y" | stability_on=="XY") {
histogram_plot_data_Y=data.frame(proportions=sPLS_stability_res$Y / sPLS_stability_res$NIter)
if (!is.null(color_scale)) {
histogram_plot_Y=ggplot(histogram_plot_data_Y) + geom_histogram(aes(x=proportions),fill=color_scale[1],color="black")
} else {
histogram_plot_Y=ggplot(histogram_plot_data_Y) + geom_histogram(aes(x=proportions))
}
histogram_plot_Y = histogram_plot_Y + scale_x_continuous(limits=c(0,1.1),expand=c(0,0)) +
scale_y_continuous(expand=expand_scale(mult = c(0, .1))) + custom_theme +
geom_vline(xintercept = (sPLS_stability_res$NVarY/length(sPLS_stability_res$Y)),size=1,color="black") +
ggtitle(paste0("Histogram of selection proportions of Y variables\n for an sPLS with ",
sPLS_stability_res$NVarY/length(sPLS_stability_res$Y)*100," % of variables selected"))
}
if (stability_on=="X") {
return(histogram_plot_X)
} else if (stability_on=="Y") {
return(histogram_plot_Y)
} else if (stability_on=="XY") {
return(list(histogram_plot_X=histogram_plot_X,histogram_plot_Y=histogram_plot_Y))
}
}
sPLS_stability_analysis_plot2_OnY_proteins_light_imp=sPLS_stability_analysis_plot_big_dataset(sPLS_stability_analysis_OnY_proteins_light_imp,
custom_theme=theme_jh,color_scale=distinct_scale,stability_on="Y")
x11()
print(sPLS_stability_analysis_plot2_OnY_proteins_light_imp)
pdf("Proteins_plots/sPLS_stability_analysis_plot2_OnY_proteins_light_imp.pdf")
print(sPLS_stability_analysis_plot2_OnY_proteins_light_imp)
dev.off()
x11()
print(sPLS_stability_analysis_plot2_OnY_proteins_light_imp)
sPLS_stability_analysis_plot2_OnY_proteins_light_imp=sPLS_stability_analysis_plot_big_dataset(sPLS_stability_analysis_OnXAndY_proteins_light_imp,
custom_theme=theme_jh,color_scale=distinct_scale,
stability_on="XY")
SummarysPLSOnXAndY_joel_proteins_light_imp=readRDS("Proteins_PC_results/SummarysPLSOnXAndY_joel_proteins_light_imp.rds")
KeepXFull <- SummarysPLSOnXAndY_joel_proteins_light_imp[SummarysPLSOnXAndY_joel_proteins_light_imp$best==1,'nVarX']
KeepYFull <- SummarysPLSOnXAndY_joel_proteins_light_imp[SummarysPLSOnXAndY_joel_proteins_light_imp$best==1,'nVarY']
nComp=1
sPLS_stability_analysis_OnXAndY_proteins_light_imp=sPLS_stability_analysis(exposures_proteins[,3:ncol(exposures_proteins)], proteins ,
NVarY=KeepYFull[nComp],NVarX=KeepXFull[nComp],
NIter=100,chosen_seed=1,stability_on="XY")
sPLS_stability_analysis_plot2_OnY_proteins_light_imp=sPLS_stability_analysis_plot_big_dataset(sPLS_stability_analysis_OnXAndY_proteins_light_imp,
custom_theme=theme_jh,color_scale=distinct_scale,
stability_on="XY")
pdf("Proteins_plots/sPLS_stability_analysis_plot2_OnXAndY_proteins_light_imp_X.pdf")
print(sPLS_stability_analysis_plot2_OnY_proteins_light_imp[[1]])
dev.off()
x11()
print(sPLS_stability_analysis_plot2_OnY_proteins_light_imp[[1]])
pdf("Proteins_plots/sPLS_stability_analysis_plot2_OnXAndY_proteins_light_imp_Y.pdf")
print(sPLS_stability_analysis_plot2_OnY_proteins_light_imp[[1]])
dev.off()
x11()
print(sPLS_stability_analysis_plot2_OnY_proteins_light_imp[[2]])
graphics.off()
using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
using("FactoMineR","ggplot2","ggrepel","viridis","RColorBrewer","reshape2","magrittr",
"gridExtra","grid","dplyr","parallel","clusterCrit")
setwd("C:/Users/JOE/Documents/Imperial College 2018-2019/Translational Data Science/Barracudas")
multi_morbid=readRDS("../data/processed/multi_morbid_ordinal_continuous.rds")
multi_morbid=multi_morbid[1:200,]
source("code/utility_functions/FAMD_plots_utility.R")
source("code/utility_functions/colors_themes_utility.R")
source("code/utility_functions/clustering_utility.R")
FAMD_multi_morbid_res=readRDS("../data/processed/FAMD_ordinal_continuous_multi_morbid_res.rds")
nb_comp_FAMD_multi_morbid=which(FAMD_multi_morbid_res$eig[,3] > 90)[1]
n_classes=2:8
cluster_crit_df=as.data.frame(matrix(0,nrow=length(n_classes),ncol=3))
cluster_crit_df[,1]=n_classes
colnames(cluster_crit_df)=c("n_classes","Cal_Har","Silhouette")
# Different numbers of centers
for (k in 1:length(n_classes)) {
FAMD_kmeans_multi_morbid=kmeans(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],centers=n_classes[k])
cluster_crit_df[k,2:3]=unlist(intCriteria(traj=as.matrix(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid]),
part=FAMD_kmeans_multi_morbid$cluster,c("Calinski_Harabasz","Silhouette")))
}
saveRDS(cluster_crit_df,"../results/results_joel_HPC/FAMD_kmeans_ordinal_continuous/cluster_crit_df_FAMD_kmeans_ordinal_continuous_multi_morbid.rds")
FAMD_kmeans_multi_morbid=kmeans(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],centers=3)
# FAMD_kmeans_multi_morbid=readRDS("../results/results_joel_HPC/FAMD_kmeans/FAMD_kmeans_multi_morbid.rds")
saveRDS(FAMD_kmeans_multi_morbid,"../results/results_joel_HPC/FAMD_kmeans_ordinal_continuous/FAMD_kmeans_ordinal_continuous_multi_morbid.rds")
clusters_FAMD_kmeans_multi_morbid=FAMD_kmeans_multi_morbid$cluster
FAMD_kmeans_multi_morbid_plot_d12=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_FAMD_kmeans_multi_morbid,
dims=c(1,2),
custom_theme=theme_jh,color_scale=distinct_scale,show_labels = FALSE)
FAMD_kmeans_multi_morbid_plot_d34=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_FAMD_kmeans_multi_morbid,
dims=c(3,4),
custom_theme=theme_jh,color_scale=distinct_scale,show_labels = FALSE)
svg(filename="../results/results_joel_HPC/FAMD_kmeans_ordinal_continuous/FAMD_kmeans_ordinal_continuous_multi_morbid_plot_d12.svg",width=10,height=10)
print(FAMD_kmeans_multi_morbid_plot_d12)
dev.off()
svg(filename="../results/results_joel_HPC/FAMD_kmeans_ordinal_continuous/FAMD_kmeans_ordinal_continuous_multi_morbid_plot_d34.svg",width=10,height=10)
print(FAMD_kmeans_multi_morbid_plot_d34)
dev.off()
################################################
# Means continuous variables by cluster
################################################
cat_variables=colnames(multi_morbid)[sapply(multi_morbid,class) == "factor"]
cont_variables=colnames(multi_morbid)[sapply(multi_morbid,class) != "factor"]
cont_variables=cont_variables[2:length(cont_variables)]
FAMD_kmeans_mean_by_cluster_continuous_plot=mean_by_cluster_continuous(data=multi_morbid[,cont_variables],
classes=as.factor(clusters_FAMD_kmeans_multi_morbid),
color_scale=NULL,custom_theme=theme_jh,title=NULL)
svg(filename="../results/results_joel_HPC/FAMD_kmeans_ordinal_continuous/FAMD_kmeans_ordinal_continuous_multi_morbid_mean_by_cluster_continuous_plot.svg",width=10,height=10)
print(FAMD_kmeans_mean_by_cluster_continuous_plot)
dev.off()
################################################
# Distributions Cat variables by cluster
################################################
cat_variables_split=splitIndices(nx=length(cat_variables), ncl=ceiling(length(cat_variables) / 9))
for (k in 1:length(cat_variables_split)) {
FAMD_kmeans_cat_distribution_by_cluster=cat_distribution_by_cluster(data=multi_morbid[,cat_variables[cat_variables_split[[k]]]],
classes=as.factor(clusters_FAMD_kmeans_multi_morbid),layout=c(3,3),
color_scale=NULL,custom_theme=theme_jh,
title=paste0("Distributions of categorical variables by classes (",
k,"/",length(cat_variables_split),")"))
svg(filename=paste0("../results/results_joel_HPC/FAMD_kmeans_ordinal_continuous/FAMD_kmeans_ordinal_continuous_multi_morbid_cat_distribution_by_cluster_",k,"_",length(cat_variables_split),".svg"),
width=10,height=10)
grid.draw(FAMD_kmeans_cat_distribution_by_cluster)
dev.off()
}
################################################
# Distributions Cont variables by cluster
################################################
cont_variables_split=splitIndices(nx=length(cont_variables), ncl=ceiling(length(cont_variables) / 9))
for (k in 1:length(cont_variables_split)) {
FAMD_kmeans_cont_distribution_by_cluster=cont_distribution_by_cluster(data=multi_morbid[,cont_variables[cont_variables_split[[k]]]],
classes=as.factor(clusters_FAMD_kmeans_multi_morbid),layout=c(3,3),
color_scale=NULL,custom_theme=theme_jh,
title=paste0("Distributions of continuous variables by classes (",
k,"/",length(cont_variables_split),")"))
svg(filename=paste0("../results/results_joel_HPC/FAMD_kmeans_ordinal_continuous/FAMD_kmeans_ordinal_continuous_multi_morbid_cont_distribution_by_cluster_",k,"_",length(cont_variables_split),".svg"),
width=10,height=10)
grid.draw(FAMD_kmeans_cont_distribution_by_cluster)
dev.off()
}
cont_variables
cat_variables
distribution_test_df=data.frame(matrix(0,ncol(4),nrow(length(c(cont_variables,cat_variables)))))
distribution_test_df=data.frame(matrix(0,ncol=4,nrow=length(c(cont_variables,cat_variables))))
distribution_test_df
colnames(distribution_test_df)=c("var_name","Type","Test","p-value")
distribution_test_df[1,]=c(cont_variables,cat_variables)
distribution_test_df[2,]=c(rep("Cont",length(cont_variables),rep("Cat",length(cat_variables)))
c(cont_variables,cat_variables)
cont_variables
cat_variables
length(c(cont_variables,cat_variables))
distribution_test_df[,1]=c(cont_variables,cat_variables)
distribution_test_df[,2]=c(rep("Cont",length(cont_variables),rep("Cat",length(cat_variables)))
distribution_test_df[,1]=c(cont_variables,cat_variables)
distribution_test_df[,2]=c(rep("Cont",length(cont_variables),rep("Cat",length(cat_variables))))
rep("Cont",length(cont_variables)
distribution_test_df[,2]=c(rep("Cont",length(cont_variables)),rep("Cat",length(cat_variables)))
distribution_test_df[,3]=c(rep("K-S",length(cont_variables)),rep("Chi2",length(cat_variables)))
k=1
distribution_test_df
combn(1:5, 2)
distribution_test_df=data.frame(matrix(0,ncol=4,nrow=length(c(cont_variables,cat_variables))))
colnames(distribution_test_df)=c("var_name","Type","Test","p-value")
distribution_test_df[,1]=c(cont_variables,cat_variables)
distribution_test_df[,2]=c(rep("Cont",length(cont_variables)),rep("Cat",length(cat_variables)))
distribution_test_df[,3]=c(rep("ANOVA",length(cont_variables)),rep("Chi2",length(cat_variables)))
distribution_test_df
test=data.frame(multi_morbid[,distribution_test_df[k,1]],clusters_FAMD_kmeans_multi_morbid)
test
test=data.frame(outcome=multi_morbid[,distribution_test_df[k,1]],clusters=clusters_FAMD_kmeans_multi_morbid)
test=data.frame(outcome=multi_morbid[,distribution_test_df[k,1]],clusters=as.factor(clusters_FAMD_kmeans_multi_morbid))
lm(outcome ~ clusters)
lm(outcome ~ clusters,data=test)
summary(lm(outcome ~ clusters,data=test))
bleh=summary(lm(outcome ~ clusters,
data=data.frame(outcome=multi_morbid[,distribution_test_df[k,1]],clusters=as.factor(clusters_FAMD_kmeans_multi_morbid))))
bleh
bleh$fstatistic
anova_res=summary(lm(outcome ~ clusters,
data=data.frame(outcome=multi_morbid[,distribution_test_df[k,1]],clusters=as.factor(clusters_FAMD_kmeans_multi_morbid))))
distribution_test_df
k=78
multi_morbid[,distribution_test_df[k,1]]
chisq.test(multi_morbid[,distribution_test_df[k,1]],as.factor(clusters_FAMD_kmeans_multi_morbid))
duh=chisq.test(multi_morbid[,distribution_test_df[k,1]],as.factor(clusters_FAMD_kmeans_multi_morbid))
duh$p.value
for (k in 1:nrow(distribution_test_df)) {
if (distribution_test_df[k,3]=="ANOVA") {
anova_res=summary(lm(outcome ~ clusters,
data=data.frame(outcome=multi_morbid[,distribution_test_df[k,1]],clusters=as.factor(clusters_FAMD_kmeans_multi_morbid))))
distribution_test_df[k,4]=df(anova_res$fstatistic[1], anova_res$fstatistic[2], anova_res$fstatistic[3])
} else if (distribution_test_df[k,3]=="Chi2") {
distribution_test_df[k,4]=chisq.test(multi_morbid[,distribution_test_df[k,1]],as.factor(clusters_FAMD_kmeans_multi_morbid))$p.value
}
}
distribution_test_df[k,1]
k
clusters_FAMD_kmeans_multi_morbid
multi_morbid[,distribution_test_df[k,1]]
distribution_test_df
p_value_data=distribution_test_df
distribution_test_df=data.frame(matrix(0,ncol=4,nrow=length(c(cont_variables,cat_variables))))
colnames(distribution_test_df)=c("var_name","Type","Test","p_value")
distribution_test_df[,1]=c(cont_variables,cat_variables)
distribution_test_df[,2]=c(rep("Cont",length(cont_variables)),rep("Cat",length(cat_variables)))
distribution_test_df[,3]=c(rep("ANOVA",length(cont_variables)),rep("Chi2",length(cat_variables)))
for (k in 1:nrow(distribution_test_df)) {
if (distribution_test_df[k,3]=="ANOVA") {
anova_res=summary(lm(outcome ~ clusters,
data=data.frame(outcome=multi_morbid[,distribution_test_df[k,1]],clusters=as.factor(clusters_FAMD_kmeans_multi_morbid))))
distribution_test_df[k,4]=df(anova_res$fstatistic[1], anova_res$fstatistic[2], anova_res$fstatistic[3])
} else if (distribution_test_df[k,3]=="Chi2") {
distribution_test_df[k,4]=chisq.test(multi_morbid[,distribution_test_df[k,1]],as.factor(clusters_FAMD_kmeans_multi_morbid))$p.value
}
}
p_value_plot=ggplot(p_value_data) + geom_point(aes(x=var_name,y=p_value,color=Type))
x11()
print( p_value_plot)
p_value_data=distribution_test_df
p_value_plot=ggplot(p_value_data) + geom_point(aes(x=var_name,y=p_value,color=Type))
x11()
print(p_value_plot)
p_value_data[,'p_value']=-log10(p_value_data[,'p_value'])
p_value_plot=ggplot(p_value_data) + geom_point(aes(x=var_name,y=p_value,color=Type))
x11()
print(p_value_plot)
p_value_data[,'p_value']=-log10(p_value_data[,'p_value'])
p_value_plot=ggplot(p_value_data) + geom_point(aes(x=var_name,y=p_value,color=Type)) + theme(axis.text.x = element_text(angle=60))
x11()
print(p_value_plot)
p_value_data[,'p_value']=-log10(p_value_data[,'p_value'])
p_value_plot=ggplot(p_value_data) + geom_point(aes(x=var_name,y=p_value,color=Type)) + theme(axis.text.x = element_text(angle=60,vjust = -1))
x11()
print(p_value_plot)
p_value_data[,'p_value']=-log10(p_value_data[,'p_value'])
p_value_plot=ggplot(p_value_data) + geom_point(aes(x=var_name,y=p_value,color=Type)) + theme(axis.text.x = element_text(angle=60,vjust = -0.5))
x11()
print(p_value_plot)
p_value_data[,'p_value']=-log10(p_value_data[,'p_value'])
p_value_plot=ggplot(p_value_data) + geom_point(aes(x=var_name,y=p_value,color=Type)) + theme(axis.text.x = element_text(angle=60,vjust = -0.2))
x11()
print(p_value_plot)
p_value_data[,'p_value']=-log10(p_value_data[,'p_value'])
p_value_plot=ggplot(p_value_data) + geom_point(aes(x=var_name,y=p_value,color=Type)) + theme(axis.text.x = element_text(angle=60,vjust = 0.5))
x11()
print(p_value_plot)
p_value_data[,'p_value']=-log10(p_value_data[,'p_value'])
p_value_plot=ggplot(p_value_data) + geom_point(aes(x=var_name,y=p_value,color=Type)) + theme(axis.text.x = element_text(angle=60,vjust = 0.8))
x11()
print(p_value_plot)
p_value_data[,'p_value']=-log10(p_value_data[,'p_value'])
p_value_data=distribution_test_df
p_value_data[,'p_value']=-log10(p_value_data[,'p_value'])
p_value_plot=ggplot(p_value_data) + geom_point(aes(x=var_name,y=p_value,color=Type)) + theme(axis.text.x = element_text(angle=60,vjust = 0.8))
x11()
print(p_value_plot)
p_value_data
is.infinite(p_value_data[,'p_value'])
p_value_data[,'p_value']=-log10(p_value_data[,'p_value'])
p_value_data[is.infinite(p_value_data[,'p_value']),]=0
p_value_plot=ggplot(p_value_data) + geom_point(aes(x=var_name,y=p_value,color=Type)) + theme(axis.text.x = element_text(angle=60,vjust = 0.8))
x11()
print(p_value_plot)
p_value_data[,'p_value']=-log10(p_value_data[,'p_value'])
p_value_data[is.infinite(p_value_data[,'p_value']),'p_value']=0
p_value_plot=ggplot(p_value_data) + geom_point(aes(x=var_name,y=p_value,color=Type)) + theme(axis.text.x = element_text(angle=60,vjust = 0.8))
x11()
print(p_value_plot)
