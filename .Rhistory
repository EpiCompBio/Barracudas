lapply(need,require,character.only=TRUE)
}
}
using("BiocManager","keras","tensorflow","magrittr")
using_bioconductor <-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
BiocManager::install(need)
lapply(need,require,character.only=TRUE)
}
}
using_bioconductor("rhdf5")
########################################################
# Load data and put it in the correct format : H5
########################################################
print(h5ls(paste0("C:/Users/JOE/Documents/_Jupyter_Notebooks/Python_MOOC_Deep_Learning/",
"Neural Networks and Deep Learning_W32/datasets/train_catvnoncat.h5")))
list_classes <- h5read(paste0("C:/Users/JOE/Documents/_Jupyter_Notebooks/Python_MOOC_Deep_Learning/",
"Neural Networks and Deep Learning_W32/datasets/train_catvnoncat.h5"),name="list_classes")
print(list_classes)
train_set_x <- h5read(paste0("C:/Users/JOE/Documents/_Jupyter_Notebooks/Python_MOOC_Deep_Learning/",
"Neural Networks and Deep Learning_W32/datasets/train_catvnoncat.h5"),name="train_set_x")
train_set_y <- h5read(paste0("C:/Users/JOE/Documents/_Jupyter_Notebooks/Python_MOOC_Deep_Learning/",
"Neural Networks and Deep Learning_W32/datasets/train_catvnoncat.h5"),name="train_set_y")
rep(500,8)
print(h5ls(paste0("C:/Users/JOE/Documents/_Jupyter_Notebooks/Python_MOOC_Deep_Learning/",
"Neural Networks and Deep Learning_W32/datasets/test_catvnoncat.h5")))
test_set_x <- h5read(paste0("C:/Users/JOE/Documents/_Jupyter_Notebooks/Python_MOOC_Deep_Learning/",
"Neural Networks and Deep Learning_W32/datasets/test_catvnoncat.h5"),name="test_set_x")
test_set_y <- h5read(paste0("C:/Users/JOE/Documents/_Jupyter_Notebooks/Python_MOOC_Deep_Learning/",
"Neural Networks and Deep Learning_W32/datasets/test_catvnoncat.h5"),name="test_set_y")
test_set_y
x_test_data=matrix(0,nrow=dim(test_set_x)[4],ncol= dim(test_set_x)[1] * dim(test_set_x)[2] * dim(test_set_x)[3])
print(dim(x_test_data))
for (k in 1:dim(test_set_x)[4]) {
print(k)
x_test_data[k,]=unlist(lapply(1:3,function(x) {return(as.vector(test_set_x[x, , ,k]))}))
}
x_test_data <- x_test_data / 255;
Input = layer_input(shape=ncol(x_train_data))
# Define all layers
Input = layer_input(shape=ncol(x_train_data))
ncol(x_train_data)
using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
using("BiocManager","keras","tensorflow","magrittr")
using_bioconductor <-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
BiocManager::install(need)
lapply(need,require,character.only=TRUE)
}
}
using_bioconductor("rhdf5")
########################################################
# Load data and put it in the correct format : H5
########################################################
# TRAINING SET
print(h5ls(paste0("C:/Users/JOE/Documents/_Jupyter_Notebooks/Python_MOOC_Deep_Learning/",
"Neural Networks and Deep Learning_W32/datasets/train_catvnoncat.h5")))
list_classes <- h5read(paste0("C:/Users/JOE/Documents/_Jupyter_Notebooks/Python_MOOC_Deep_Learning/",
"Neural Networks and Deep Learning_W32/datasets/train_catvnoncat.h5"),name="list_classes")
print(list_classes)
train_set_x <- h5read(paste0("C:/Users/JOE/Documents/_Jupyter_Notebooks/Python_MOOC_Deep_Learning/",
"Neural Networks and Deep Learning_W32/datasets/train_catvnoncat.h5"),name="train_set_x")
train_set_y <- h5read(paste0("C:/Users/JOE/Documents/_Jupyter_Notebooks/Python_MOOC_Deep_Learning/",
"Neural Networks and Deep Learning_W32/datasets/train_catvnoncat.h5"),name="train_set_y")
x_train_data=matrix(0,nrow=dim(train_set_x)[4],ncol= dim(train_set_x)[1] * dim(train_set_x)[2] * dim(train_set_x)[3])
print(dim(x_train_data))
for (k in 1:dim(train_set_x)[4]) {
print(k)
x_train_data[k,]=unlist(lapply(1:3,function(x) {return(as.vector(train_set_x[x, , ,k]))}))
}
x_train_data <- x_train_data / 255;
y_train_data <- to_categorical(train_set_y, 2)
# TEST SET
print(h5ls(paste0("C:/Users/JOE/Documents/_Jupyter_Notebooks/Python_MOOC_Deep_Learning/",
"Neural Networks and Deep Learning_W32/datasets/test_catvnoncat.h5")))
test_set_x <- h5read(paste0("C:/Users/JOE/Documents/_Jupyter_Notebooks/Python_MOOC_Deep_Learning/",
"Neural Networks and Deep Learning_W32/datasets/test_catvnoncat.h5"),name="test_set_x")
test_set_y <- h5read(paste0("C:/Users/JOE/Documents/_Jupyter_Notebooks/Python_MOOC_Deep_Learning/",
"Neural Networks and Deep Learning_W32/datasets/test_catvnoncat.h5"),name="test_set_y")
x_test_data=matrix(0,nrow=dim(test_set_x)[4],ncol= dim(test_set_x)[1] * dim(test_set_x)[2] * dim(test_set_x)[3])
print(dim(x_test_data))
for (k in 1:dim(test_set_x)[4]) {
print(k)
x_test_data[k,]=unlist(lapply(1:3,function(x) {return(as.vector(test_set_x[x, , ,k]))}))
}
x_test_data <- x_test_data / 255;
x_train_data[1:10,1:10]
# Define all layers
Input = layer_input(shape=ncol(x_train_data))
D1=Input %>% layer_dense(units=20)
A1=D1 %>% layer_activation(activation="relu")
DOut=A1 %>% layer_dense(units=2)
AOut=DOut %>% layer_activation_softmax()
#Define input and output layers
inputs <- Input
predictions <- AOut
#Define the model with input and output layers
model <- keras_model(inputs = inputs, outputs = predictions)
# create and compile model
model %>% compile(
optimizer = 'sgd',
loss = 'categorical_crossentropy',
metrics = c('accuracy')
)
using("BiocManager","keras","tensorflow","magrittr")
Input = layer_input(shape=ncol(x_train_data))
D1=Input %>% layer_dense(units=20)
A1=D1 %>% layer_activation(activation="relu")
DOut=A1 %>% layer_dense(units=2)
AOut=DOut %>% layer_activation_softmax()
#Define input and output layers
inputs <- Input
predictions <- AOut
#Define the model with input and output layers
model <- keras_model(inputs = inputs, outputs = predictions)
# create and compile model
model %>% compile(
optimizer = 'sgd',
loss = 'categorical_crossentropy',
metrics = c('accuracy')
)
model
cat("-------------------------------------------------------------------------------------------")
cat("\n")
cat("\n")
cat("These functions depend on the libraries : \n")
cat("\n")
cat("viridis, RColorBrewer, ggplot2")
cat("\n")
cat("\n")
cat("-------------------------------------------------------------------------------------------")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/FAMD_plots_utility.R")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/colors_themes_utility.R")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/clustering_utility.R")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/FAMD_plots_utility.R")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/colors_themes_utility.R")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/clustering_utility.R")
FAMD_multi_morbid_res=readRDS("../data/processed/FAMD_ordinal_continuous_multi_morbid_res.rds")
nb_comp_FAMD_multi_morbid=which(FAMD_multi_morbid_res$eig[,3] > 60)[1]
################################################################################
# Kmeans on the FAMD row coordinates with the best number of clusters
################################################################################
FAMD_GMM_multi_morbid=Mclust(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],G=2)
saveRDS(FAMD_GMM_multi_morbid,"../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid.rds")
clusters_FAMD_GMM_multi_morbid=FAMD_GMM_multi_morbid$classification
FAMD_GMM_multi_morbid_plot_d12=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_FAMD_GMM_multi_morbid,
dims=c(1,2),
custom_theme=theme_jh,color_scale=distinct_scale,show_labels = FALSE)
FAMD_GMM_multi_morbid_plot_d34=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_FAMD_GMM_multi_morbid,
dims=c(3,4),
custom_theme=theme_jh,color_scale=distinct_scale,show_labels = FALSE)
svg(filename="../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid_plot_d12.svg",width=10,height=10)
print(FAMD_GMM_multi_morbid_plot_d12)
dev.off()
svg(filename="../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid_plot_d34.svg",width=10,height=10)
print(FAMD_GMM_multi_morbid_plot_d34)
dev.off()
################################################
# Means continuous variables by cluster
################################################
cat_variables=colnames(multi_morbid)[sapply(multi_morbid,class) == "factor"]
cont_variables=colnames(multi_morbid)[sapply(multi_morbid,class) != "factor"]
cont_variables=cont_variables[2:length(cont_variables)]
FAMD_GMM_mean_by_cluster_continuous_plot=mean_by_cluster_continuous(data=multi_morbid[,cont_variables],
classes=as.factor(clusters_FAMD_GMM_multi_morbid),
color_scale=NULL,custom_theme=theme_jh,title=NULL)
svg(filename="../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid_mean_by_cluster_continuous_plot.svg",width=10,height=10)
print(FAMD_GMM_mean_by_cluster_continuous_plot)
dev.off()
setwd("C:/Users/JOE/Documents/Imperial College 2018-2019/Translational Data Science/Barracudas")
multi_morbid=readRDS("../data/processed/multi_morbid_ordinal_continuous.rds")
multi_morbid=multi_morbid[1:200,]
FAMD_multi_morbid_res=readRDS("../data/processed/FAMD_ordinal_continuous_multi_morbid_res.rds")
nb_comp_FAMD_multi_morbid=which(FAMD_multi_morbid_res$eig[,3] > 60)[1]
################################################################################
# Kmeans on the FAMD row coordinates with the best number of clusters
################################################################################
FAMD_GMM_multi_morbid=Mclust(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],G=2)
saveRDS(FAMD_GMM_multi_morbid,"../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid.rds")
clusters_FAMD_GMM_multi_morbid=FAMD_GMM_multi_morbid$classification
FAMD_GMM_multi_morbid_plot_d12=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_FAMD_GMM_multi_morbid,
dims=c(1,2),
custom_theme=theme_jh,color_scale=distinct_scale,show_labels = FALSE)
FAMD_GMM_multi_morbid_plot_d34=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_FAMD_GMM_multi_morbid,
dims=c(3,4),
custom_theme=theme_jh,color_scale=distinct_scale,show_labels = FALSE)
svg(filename="../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid_plot_d12.svg",width=10,height=10)
print(FAMD_GMM_multi_morbid_plot_d12)
dev.off()
svg(filename="../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid_plot_d34.svg",width=10,height=10)
print(FAMD_GMM_multi_morbid_plot_d34)
dev.off()
using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
using("FactoMineR","parallel","clusterCrit","reshape2","magrittr","gridExtra","grid","dplyr","parallel","clusterCrit","mclust")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/FAMD_plots_utility.R")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/colors_themes_utility.R")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/clustering_utility.R")
using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
using("FactoMineR","parallel","clusterCrit","reshape2","magrittr","gridExtra","grid","dplyr","parallel","clusterCrit","mclust")
FAMD_multi_morbid_res=readRDS("../data/processed/FAMD_ordinal_continuous_multi_morbid_res.rds")
nb_comp_FAMD_multi_morbid=which(FAMD_multi_morbid_res$eig[,3] > 60)[1]
################################################################################
# Kmeans on the FAMD row coordinates with the best number of clusters
################################################################################
FAMD_GMM_multi_morbid=Mclust(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],G=2)
saveRDS(FAMD_GMM_multi_morbid,"../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid.rds")
clusters_FAMD_GMM_multi_morbid=FAMD_GMM_multi_morbid$classification
FAMD_GMM_multi_morbid_plot_d12=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_FAMD_GMM_multi_morbid,
dims=c(1,2),
custom_theme=theme_jh,color_scale=distinct_scale,show_labels = FALSE)
FAMD_GMM_multi_morbid_plot_d34=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_FAMD_GMM_multi_morbid,
dims=c(3,4),
custom_theme=theme_jh,color_scale=distinct_scale,show_labels = FALSE)
svg(filename="../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid_plot_d12.svg",width=10,height=10)
print(FAMD_GMM_multi_morbid_plot_d12)
dev.off()
svg(filename="../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid_plot_d34.svg",width=10,height=10)
print(FAMD_GMM_multi_morbid_plot_d34)
dev.off()
cat_variables=colnames(multi_morbid)[sapply(multi_morbid,class) == "factor"]
cont_variables=colnames(multi_morbid)[sapply(multi_morbid,class) != "factor"]
cont_variables=cont_variables[2:length(cont_variables)]
cat_variables
cont_variable
cont_variables=colnames(multi_morbid)[sapply(multi_morbid,class) != "factor"]
cont_variables
cont_variables=cont_variables[2:length(cont_variables)]
cont_variables
multi_morbid=readRDS("../data/processed/multi_morbid_ordinal_keep.rds")
multi_morbid=multi_morbid[1:200,]
FAMD_multi_morbid_res=readRDS("../data/processed/FAMD_ordinal_factors_multi_morbid_res.rds")
nb_comp_FAMD_multi_morbid=which(FAMD_multi_morbid_res$eig[,3] > 80)[1]
FAMD_multi_morbid_res=readRDS("../data/processed/FAMD_ordinal_factors_multi_morbid_res.rds")
nb_comp_FAMD_multi_morbid=which(FAMD_multi_morbid_res$eig[,3] > 60)[1]
FAMD_GMM_multi_morbid=Mclust(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],G=2)
saveRDS(FAMD_GMM_multi_morbid,"../results/results_joel_HPC/FAMD_GMM_ordinal_factors/FAMD_GMM_ordinal_factors_multi_morbid.rds")
clusters_FAMD_GMM_multi_morbid=FAMD_GMM_multi_morbid$classification
FAMD_GMM_multi_morbid_plot_d12=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_FAMD_GMM_multi_morbid,
dims=c(1,2),
custom_theme=theme_jh,color_scale=distinct_scale,show_labels = FALSE)
FAMD_GMM_multi_morbid_plot_d34=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_FAMD_GMM_multi_morbid,
dims=c(3,4),
custom_theme=theme_jh,color_scale=distinct_scale,show_labels = FALSE)
svg(filename="../results/results_joel_HPC/FAMD_GMM_ordinal_factors/FAMD_GMM_ordinal_factors_multi_morbid_plot_d12.svg",width=10,height=10)
print(FAMD_GMM_multi_morbid_plot_d12)
dev.off()
svg(filename="../results/results_joel_HPC/FAMD_GMM_ordinal_factors/FAMD_GMM_ordinal_factors_multi_morbid_plot_d34.svg",width=10,height=10)
print(FAMD_GMM_multi_morbid_plot_d34)
dev.off()
cat_variables=colnames(multi_morbid)[sapply(sapply(multi_morbid,class),function(x) {x[[1]]}) == "factor" |
sapply(sapply(multi_morbid,class),function(x) {x[[1]]}) == "ordered"]
cont_variables=colnames(multi_morbid)[sapply(multi_morbid,class) == "numeric"]
cat_variables
cont_variables
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/FAMD_plots_utility.R")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/colors_themes_utility.R")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/clustering_utility.R")
using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
using("FactoMineR","ggplot2","ggrepel","viridis","RColorBrewer","reshape2","magrittr","gridExtra","grid","dplyr","parallel","clusterCrit","mclust")
using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
using("FactoMineR","ggplot2","ggrepel","viridis","RColorBrewer","reshape2","magrittr",
"gridExtra","grid","dplyr","parallel","apcluster")
source("code/utility_functions/FAMD_plots_utility.R")
source("code/utility_functions/colors_themes_utility.R")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/FAMD_plots_utility.R")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/colors_themes_utility.R")
using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
using("FactoMineR","ggplot2","ggrepel","viridis","RColorBrewer","reshape2","magrittr","gridExtra","grid","dplyr","parallel","clusterCrit","mclust")
multi_morbid=readRDS("../data/processed/multi_morbid_ordinal_continuous.rds")
multi_morbid=multi_morbid[1:200,]
source("code/utility_functions/FAMD_plots_utility.R")
source("code/utility_functions/colors_themes_utility.R")
source("code/utility_functions/clustering_utility.R")
FAMD_multi_morbid_res=readRDS("../data/processed/FAMD_ordinal_continuous_multi_morbid_res.rds")
nb_comp_FAMD_multi_morbid=which(FAMD_multi_morbid_res$eig[,3] > 60)[1]
################################################################################
# Kmeans on the FAMD row coordinates with the best number of clusters
################################################################################
FAMD_GMM_multi_morbid=Mclust(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],G=2)
saveRDS(FAMD_GMM_multi_morbid,"../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid.rds")
clusters_FAMD_GMM_multi_morbid=FAMD_GMM_multi_morbid$classification
FAMD_GMM_multi_morbid_plot_d12=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_FAMD_GMM_multi_morbid,
dims=c(1,2),
custom_theme=theme_jh,color_scale=distinct_scale,show_labels = FALSE)
FAMD_GMM_multi_morbid_plot_d34=make_FAMD_ind_plot_classes(FAMD_multi_morbid_res,classes=clusters_FAMD_GMM_multi_morbid,
dims=c(3,4),
custom_theme=theme_jh,color_scale=distinct_scale,show_labels = FALSE)
svg(filename="../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid_plot_d12.svg",width=10,height=10)
print(FAMD_GMM_multi_morbid_plot_d12)
dev.off()
svg(filename="../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid_plot_d34.svg",width=10,height=10)
print(FAMD_GMM_multi_morbid_plot_d34)
dev.off()
################################################
# Means continuous variables by cluster
################################################
cat_variables=colnames(multi_morbid)[sapply(multi_morbid,class) == "factor"]
cont_variables=colnames(multi_morbid)[sapply(multi_morbid,class) != "factor"]
cont_variables=cont_variables[2:length(cont_variables)]
FAMD_GMM_mean_by_cluster_continuous_plot=mean_by_cluster_continuous(data=multi_morbid[,cont_variables],
classes=as.factor(clusters_FAMD_GMM_multi_morbid),
color_scale=NULL,custom_theme=theme_jh,title=NULL)
svg(filename="../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid_mean_by_cluster_continuous_plot.svg",width=10,height=10)
print(FAMD_GMM_mean_by_cluster_continuous_plot)
dev.off()
################################################
# Distributions Cat variables by cluster
################################################
cat_variables_split=splitIndices(nx=length(cat_variables), ncl=ceiling(length(cat_variables) / 9))
for (k in 1:length(cat_variables_split)) {
FAMD_GMM_cat_distribution_by_cluster=cat_distribution_by_cluster(data=multi_morbid[,cat_variables[cat_variables_split[[k]]]],
classes=as.factor(clusters_FAMD_GMM_multi_morbid),layout=c(3,3),
color_scale=NULL,custom_theme=theme_jh,
title=paste0("Distributions of categorical variables by classes (",
k,"/",length(cat_variables_split),")"))
svg(filename=paste0("../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid_cat_distribution_by_cluster_",k,"_",length(cat_variables_split),".svg"),
width=10,height=10)
grid.draw(FAMD_GMM_cat_distribution_by_cluster)
dev.off()
}
################################################
# Distributions Cont variables by cluster
################################################
cont_variables_split=splitIndices(nx=length(cont_variables), ncl=ceiling(length(cont_variables) / 9))
for (k in 1:length(cont_variables_split)) {
FAMD_GMM_cont_distribution_by_cluster=cont_distribution_by_cluster(data=multi_morbid[,cont_variables[cont_variables_split[[k]]]],
classes=as.factor(clusters_FAMD_GMM_multi_morbid),layout=c(3,3),
color_scale=NULL,custom_theme=theme_jh,
title=paste0("Distributions of continuous variables by classes (",
k,"/",length(cont_variables_split),")"))
svg(filename=paste0("../results/results_joel_HPC/FAMD_GMM_ordinal_continuous/FAMD_GMM_ordinal_continuous_multi_morbid_cont_distribution_by_cluster_",k,"_",length(cont_variables_split),".svg"),
width=10,height=10)
grid.draw(FAMD_GMM_cont_distribution_by_cluster)
dev.off()
}
n_classes=2:8
cluster_crit_df=as.data.frame(matrix(0,nrow=length(n_classes),ncol=3))
cluster_crit_df[,1]=n_classes
colnames(cluster_crit_df)=c("n_classes","Cal_Har","Silhouette")
# Different numbers of centers
for (k in 1:length(n_classes)) {
FAMD_GMM_multi_morbid=Mclust(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],G=2)
cluster_crit_df[k,2:3]=unlist(intCriteria(traj=as.matrix(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid]),
part=FAMD_GMM_multi_morbid$classification,c("Calinski_Harabasz","Silhouette")))
}
# Different numbers of centers
for (k in 1:length(n_classes)) {
FAMD_GMM_multi_morbid=Mclust(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],G=k)
cluster_crit_df[k,2:3]=unlist(intCriteria(traj=as.matrix(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid]),
part=FAMD_GMM_multi_morbid$classification,c("Calinski_Harabasz","Silhouette")))
}
FAMD_GMM_multi_morbid=Mclust(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],G=n_classes[k])
FAMD_GMM_multi_morbid
for (k in 1:length(n_classes)) {
FAMD_GMM_multi_morbid=Mclust(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],G=n_classes[k])
cluster_crit_df[k,2:3]=unlist(intCriteria(traj=as.matrix(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid]),
part=FAMD_GMM_multi_morbid$classification,c("Calinski_Harabasz","Silhouette")))
}
FAMD_GMM_multi_morbid
FAMD_GMM_multi_morbid$classification
for (k in 1:length(n_classes)) {
FAMD_GMM_multi_morbid=Mclust(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],G=n_classes[k])
cluster_crit_df[k,2:3]=unlist(intCriteria(traj=as.matrix(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid]),
part=as.integer(FAMD_GMM_multi_morbid$classification),c("Calinski_Harabasz","Silhouette")))
}
cluster_crit_df
FAMD_multi_morbid_res=readRDS("../data/processed/FAMD_ordinal_continuous_multi_morbid_res.rds")
nb_comp_FAMD_multi_morbid=which(FAMD_multi_morbid_res$eig[,3] > 80)[1]
################################################################################
# Choosing the number of clusters for kmeans
################################################################################
n_classes=2:8
cluster_crit_df=as.data.frame(matrix(0,nrow=length(n_classes),ncol=3))
cluster_crit_df[,1]=n_classes
colnames(cluster_crit_df)=c("n_classes","Cal_Har","Silhouette")
# Different numbers of centers
for (k in 1:length(n_classes)) {
FAMD_kmeans_multi_morbid=kmeans(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],centers=n_classes[k])
cluster_crit_df[k,2:3]=unlist(intCriteria(traj=as.matrix(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid]),
part=FAMD_kmeans_multi_morbid$cluster,c("Calinski_Harabasz","Silhouette")))
}
cluster_crit_df
FAMD_multi_morbid_res=readRDS("../data/processed/FAMD_ordinal_continuous_multi_morbid_res.rds")
nb_comp_FAMD_multi_morbid=which(FAMD_multi_morbid_res$eig[,3] > 80)[1]
################################################################################
# Choosing the number of clusters
################################################################################
n_classes=2:8
cluster_crit_df=as.data.frame(matrix(0,nrow=length(n_classes),ncol=3))
cluster_crit_df[,1]=n_classes
colnames(cluster_crit_df)=c("n_classes","Cal_Har","Silhouette")
# Different numbers of centers
for (k in 1:length(n_classes)) {
FAMD_GMM_multi_morbid=Mclust(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],G=n_classes[k])
cluster_crit_df[k,2:3]=unlist(intCriteria(traj=as.matrix(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid]),
part=as.integer(FAMD_GMM_multi_morbid$classification),c("Calinski_Harabasz","Silhouette")))
}
cluster_crit_df
FAMD_multi_morbid_res
FAMD_multi_morbid_res$eig
multi_morbid=readRDS("../data/processed/multi_morbid_ordinal_keep.rds")
FAMD_multi_morbid_res=FAMD(multi_morbid[,10:ncol(multi_morbid)], ncp = ncol(multi_morbid)-10, graph = FALSE)
FAMD_multi_morbid_res$eig
FAMD_multi_morbid_res=FAMD(multi_morbid[,10:ncol(multi_morbid)], ncp = ncol(multi_morbid)+50, graph = FALSE)
FAMD_multi_morbid_res$eig
nb_comp_FAMD_multi_morbid=which(FAMD_multi_morbid_res$eig[,3] > 90)[1]
nb_comp_FAMD_multi_morbid
n_classes=2:8
cluster_crit_df=as.data.frame(matrix(0,nrow=length(n_classes),ncol=3))
cluster_crit_df[,1]=n_classes
colnames(cluster_crit_df)=c("n_classes","Cal_Har","Silhouette")
# Different numbers of centers
for (k in 1:length(n_classes)) {
FAMD_kmeans_multi_morbid=kmeans(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],centers=n_classes[k])
cluster_crit_df[k,2:3]=unlist(intCriteria(traj=as.matrix(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid]),
part=FAMD_kmeans_multi_morbid$cluster,c("Calinski_Harabasz","Silhouette")))
}
cluster_crit_df
n_classes=2:4
cluster_crit_df=as.data.frame(matrix(0,nrow=length(n_classes),ncol=3))
cluster_crit_df[,1]=n_classes
colnames(cluster_crit_df)=c("n_classes","Cal_Har","Silhouette")
# Different numbers of centers
for (k in 1:length(n_classes)) {
FAMD_kmeans_multi_morbid=kmeans(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],centers=n_classes[k])
cluster_crit_df[k,2:3]=unlist(intCriteria(traj=as.matrix(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid]),
part=FAMD_kmeans_multi_morbid$cluster,c("Calinski_Harabasz","Silhouette")))
}
FAMD_kmeans_multi_morbid
cluster_crit_df
FAMD_multi_morbid_res=FAMD(multi_morbid[,10:ncol(multi_morbid)], graph = FALSE)
FAMD_multi_morbid_res$eig
FAMD_multi_morbid_res=FAMD(multi_morbid[,10:ncol(multi_morbid)],ncp = ncol(multi_morbid)+50, graph = FALSE)
FAMD_multi_morbid_res$eig
ncol(multi_morbid)
multi_morbid=readRDS("../data/processed/multi_morbid_ordinal_keep.rds")
multi_morbid=multi_morbid[1:200,]
FAMD_multi_morbid_res=readRDS("../data/processed/FAMD_ordinal_factors_multi_morbid_res.rds")
nb_comp_FAMD_multi_morbid=which(FAMD_multi_morbid_res$eig[,3] > 90)[1]
FAMD_multi_morbid_res$eig[,3]
nb_comp_FAMD_multi_morbid=which(FAMD_multi_morbid_res$eig[,3] > 90)[1]
nb_comp_FAMD_multi_morbid
multi_morbid=readRDS("../data/processed/multi_morbid_ordinal_keep.rds")
multi_morbid=multi_morbid[1:200,]
FAMD_multi_morbid_res=readRDS("../data/processed/FAMD_ordinal_factors_multi_morbid_res.rds")
nb_comp_FAMD_multi_morbid=which(FAMD_multi_morbid_res$eig[,3] > 80)[1]
n_classes=2:8
cluster_crit_df=as.data.frame(matrix(0,nrow=length(n_classes),ncol=3))
cluster_crit_df[,1]=n_classes
colnames(cluster_crit_df)=c("n_classes","Cal_Har","Silhouette")
dim(FAMD_multi_morbid_res$ind$coord)
for (k in 1:length(n_classes)) {
FAMD_GMM_multi_morbid=Mclust(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid],G=n_classes[k])
cluster_crit_df[k,2:3]=unlist(intCriteria(traj=as.matrix(FAMD_multi_morbid_res$ind$coord[,1:nb_comp_FAMD_multi_morbid]),
part=as.integer(FAMD_GMM_multi_morbid$classification),c("Calinski_Harabasz","Silhouette")))
}
FAMD_GMM_multi_morbid
cluster_crit_df
