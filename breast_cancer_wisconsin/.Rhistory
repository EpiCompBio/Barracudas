using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
using("ggplot2","FactoMineR","reshape2","cluster","dbscan","keras","apcluster","clusterCrit","kernlab",
"randomForest","mclust")
theme_jh = theme_grey() + theme(plot.title=element_text(family="serif",face="bold",color="#8d0e00",hjust=0.5,vjust=0.5,size=16)) +
theme(panel.background = element_rect(fill='#f9f9f9', colour='white')) +
theme(axis.title = element_text(family="serif",face="bold",size=12,hjust=0.5)) +
theme(axis.line = element_line(colour = "#747474",arrow=arrow(angle = 30,length = unit(0.10, "inches")))) +
theme(legend.background = element_rect(fill='#f9f9f9', colour='black')) +
theme(legend.text = element_text(family="serif",hjust=0.5)) +
theme(legend.title = element_text(family="serif",face="bold",hjust=0.5)) +
theme(legend.key.size = unit(1,"line")) +
theme(plot.margin=unit(c(.5, .5, .5, .5), "cm"))
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/PCA_plots_utility.R")
source(paste0(path,"/R_utility_and_self_implementations/PCA_plots_utility.R"))
path<-dirname(rstudioapi::getActiveDocumentContext()$path)
source(paste0(path,"/R_utility_and_self_implementations/PCA_plots_utility.R"))
path<-dirname(rstudioapi::getActiveDocumentContext()$path)
path.functions = paste0(path,'/utility_functions_R/')
source(paste0(path.functions,"PCA_plots_utility.R"))
source(paste0(path.functions,"clustering_utility.R"))
source(paste0(path.functions,"colors_themes_utility.R"))
source(paste0(path.functions,"standard_plots_ggplot2_utility.R"))
PCA_breast_cancer_clustering=PCA(breast_cancer_clustering,ncp = 5, graph = FALSE)
breast_cancer_clustering=breast_cancer[,3:ncol(breast_cancer)]
breast_cancer=read.table("breastCancer_wisconsin.txt", sep=",")
breast_cancer_clustering=breast_cancer[,3:ncol(breast_cancer)]
breast_cancer_clustering=as.data.frame(scale(breast_cancer_clustering))
PCA_breast_cancer_clustering=PCA(breast_cancer_clustering,ncp = 5, graph = FALSE)
set.seed(2)
Input = layer_input(shape=ncol(breast_cancer_clustering))
encoder_raw_1 = Input %>% layer_dense(units=24)
encoder_activation_1 = encoder_raw_1 %>% layer_activation(activation="relu",name="encoder_activatio1")
encoder_raw_2 = encoder_activation_1 %>% layer_dense(units=16)
encoder_activation_2 = encoder_raw_2 %>% layer_activation(activation="relu",name="encoder_activation2")
encoder_raw_3 = encoder_activation_2 %>% layer_dense(units=10)
encoder_activation_3 = encoder_raw_3 %>% layer_activation(activation="relu",name="encoder_activation3")
decoder_raw = encoder_activation_3 %>% layer_dense(units=ncol(breast_cancer_clustering))
decoder_activation = decoder_raw %>% layer_activation(activation="linear")
#Define the model with input and output layers
model <- keras_model(inputs = Input, outputs = decoder_activation)
# create and compile model
model %>% compile(
optimizer = 'adadelta',
loss = 'mean_squared_error',
metrics = c('mae')
)
# fit the model
model %>% fit(
as.matrix(breast_cancer_clustering), as.matrix(breast_cancer_clustering),
epochs = 1000,
validation_split = 0,
verbose=0
)
using("ggplot2","FactoMineR","reshape2","cluster","dbscan","keras","apcluster","clusterCrit","kernlab",
"randomForest","mclust")
theme_jh = theme_grey() + theme(plot.title=element_text(family="serif",face="bold",color="#8d0e00",hjust=0.5,vjust=0.5,size=16)) +
theme(panel.background = element_rect(fill='#f9f9f9', colour='white')) +
theme(axis.title = element_text(family="serif",face="bold",size=12,hjust=0.5)) +
theme(axis.line = element_line(colour = "#747474",arrow=arrow(angle = 30,length = unit(0.10, "inches")))) +
theme(legend.background = element_rect(fill='#f9f9f9', colour='black')) +
theme(legend.text = element_text(family="serif",hjust=0.5)) +
theme(legend.title = element_text(family="serif",face="bold",hjust=0.5)) +
theme(legend.key.size = unit(1,"line")) +
theme(plot.margin=unit(c(.5, .5, .5, .5), "cm"))
path<-dirname(rstudioapi::getActiveDocumentContext()$path)
path.functions = paste0(path,'/utility_functions_R/')
source(paste0(path.functions,"PCA_plots_utility.R"))
source(paste0(path.functions,"clustering_utility.R"))
source(paste0(path.functions,"colors_themes_utility.R"))
source(paste0(path.functions,"standard_plots_ggplot2_utility.R"))
breast_cancer=read.table("breastCancer_wisconsin.txt", sep=",")
breast_cancer_clustering=breast_cancer[,3:ncol(breast_cancer)]
breast_cancer_clustering=as.data.frame(scale(breast_cancer_clustering))
PCA_breast_cancer_clustering=PCA(breast_cancer_clustering,ncp = 5, graph = FALSE)
set.seed(2)
Input = layer_input(shape=ncol(breast_cancer_clustering))
encoder_raw_1 = Input %>% layer_dense(units=24)
encoder_activation_1 = encoder_raw_1 %>% layer_activation(activation="relu",name="encoder_activatio1")
encoder_raw_2 = encoder_activation_1 %>% layer_dense(units=16)
encoder_activation_2 = encoder_raw_2 %>% layer_activation(activation="relu",name="encoder_activation2")
encoder_raw_3 = encoder_activation_2 %>% layer_dense(units=10)
encoder_activation_3 = encoder_raw_3 %>% layer_activation(activation="relu",name="encoder_activation3")
decoder_activation = decoder_raw %>% layer_activation(activation="linear")
decoder_raw = encoder_activation_3 %>% layer_dense(units=ncol(breast_cancer_clustering))
#Define the model with input and output layers
model <- keras_model(inputs = Input, outputs = decoder_activation)
