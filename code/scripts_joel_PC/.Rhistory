classes_vector=NULL
classes_list=lapply( density_list_raw,function(x) {length(x[[1]])})
for (k in 1:length(density_list_raw)) {
classes_vector=c(classes_vector,rep(names(classes_list[k]), classes_list[k]))
}
data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[1]]})),as.factor(classes_vector))
k=1
if (is.null(layout)) {
layout=c(ceiling(sqrt(ncol(data))),ceiling(sqrt(ncol(data))))
}
plot_list=list()
density_list_raw=by(data[,k],INDICES=classes,density,simplify = TRUE)
classes_vector=NULL
classes_list=lapply( density_list_raw,function(x) {length(x[[1]])})
for (k in 1:length(density_list_raw)) {
classes_vector=c(classes_vector,rep(names(classes_list[k]), classes_list[k]))
}
data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[1]]})),as.factor(classes_vector))
temp_data=data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[1]]})),as.factor(classes_vector))
temp_data
temp_plot_data=data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[1]]})),as.factor(classes_vector))
colnames(temp_plot_data)
temp_plot_data=data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[1]]})),classes=as.factor(classes_vector))
temp_plot_data=data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[1]]})),classes=as.factor(classes_vector))
tmp_plot=ggplot(data=tmp_plot_data) +
geom_line(aes(x=x,y=y,color=classes)) +
xlab("") + ylab("") + custom_theme
tmp_plot
tmp_plot_data=data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[1]]})),classes=as.factor(classes_vector))
tmp_plot=ggplot(data=tmp_plot_data) +
geom_line(aes(x=x,y=y,color=classes)) +
xlab("") + ylab("") + custom_theme
tmp_plot
tmp_plot_data=data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[2]]})),classes=as.factor(classes_vector))
tmp_plot=ggplot(data=tmp_plot_data) +
geom_line(aes(x=x,y=y,color=classes)) +
xlab("") + ylab("") + custom_theme
tmp_plot
tmp_plot=ggplot(data=tmp_plot_data) +
geom_line(aes(x=x,y=y,color=classes,fill=classes),alpha=0.2) +
xlab("") + ylab("") + custom_theme
tmp_plot
tmp_plot=ggplot(data=tmp_plot_data) +
geom_line(aes(x=x,y=y,color=classes),alpha=1) +
xlab("") + ylab("") + custom_theme
tmp_plot
if(!is.null(color_scale)) {
tmp_plot = tmp_plot + scale_color_manual(values=distinct_scale)
}
tmp_plot
k
tmp_plot_data=as.data.frame(prop.table(table(data.frame(data[,k,drop=FALSE], classes)),margin =2))
tmp_plot_data$n_ind=as.data.frame(table(data.frame(data[,k,drop=FALSE], classes)))[,3]
tmp_plot_data=tmp_plot_data %>%
arrange(.[[2]], desc(.[[1]]))
tmp_plot_data$position=as.data.frame((tmp_plot_data %>% group_by(classes) %>% mutate(cumsum(Freq))))[,5]
tmp_plot_data$position=tmp_plot_data$position - tmp_plot_data$Freq/2
tmp_plot=ggplot(data=tmp_plot_data) +
geom_bar(aes_string(x="classes",y="Freq",fill=paste0(colnames(data)[k])),stat="identity",position="stack") +
xlab("") + ylab("") + custom_theme + geom_shadowtext(aes(x=classes,y=position,label=n_ind),check_overlap = TRUE,
size = 4) + ggtitle(paste0(colnames(data)[k]))
if(!is.null(color_scale)) {
tmp_plot = tmp_plot + scale_fill_manual(values=color_scale)
}
plot_list[[k]]=tmp_plot
if (is.null(layout)) {
layout=c(ceiling(sqrt(ncol(data))),ceiling(sqrt(ncol(data))))
}
plot_list=list()
for (k in 1:ncol(data)) {
tmp_plot_data=as.data.frame(prop.table(table(data.frame(data[,k,drop=FALSE], classes)),margin =2))
tmp_plot_data$n_ind=as.data.frame(table(data.frame(data[,k,drop=FALSE], classes)))[,3]
tmp_plot_data=tmp_plot_data %>%
arrange(.[[2]], desc(.[[1]]))
tmp_plot_data$position=as.data.frame((tmp_plot_data %>% group_by(classes) %>% mutate(cumsum(Freq))))[,5]
tmp_plot_data$position=tmp_plot_data$position - tmp_plot_data$Freq/2
tmp_plot=ggplot(data=tmp_plot_data) +
geom_bar(aes_string(x="classes",y="Freq",fill=paste0(colnames(data)[k])),stat="identity",position="stack") +
xlab("") + ylab("") + custom_theme + geom_shadowtext(aes(x=classes,y=position,label=n_ind),check_overlap = TRUE,
size = 4) + ggtitle(paste0(colnames(data)[k]))
if(!is.null(color_scale)) {
tmp_plot = tmp_plot + scale_fill_manual(values=color_scale)
}
plot_list[[k]]=tmp_plot
}
final_plot=grid.arrange(gTree(children = gList(rectGrob(gp=gpar(fill="white",col="white", lwd=0)),
arrangeGrob(arrangeGrob(grobs=plot_list, ncol=layout[1], nrow=layout[2])))))
length(plot_list)
ncol(data)
data=example_mixed_data_clustering_1[,1:3]
classes=as.factor(clusters_kmeans_FAMD)
layout=NULL
color_scale=distinct_scale
custom_theme=NULL
title=NULL
if (is.null(layout)) {
layout=c(ceiling(sqrt(ncol(data))),ceiling(sqrt(ncol(data))))
}
plot_list=list()
for (k in 1:ncol(data)) {
density_list_raw=by(data[,k],INDICES=classes,density,simplify = TRUE)
classes_vector=NULL
classes_list=lapply( density_list_raw,function(x) {length(x[[1]])})
for (k in 1:length(density_list_raw)) {
classes_vector=c(classes_vector,rep(names(classes_list[k]), classes_list[k]))
}
tmp_plot_data=data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[2]]})),classes=as.factor(classes_vector))
tmp_plot=ggplot(data=tmp_plot_data) +
geom_line(aes(x=x,y=y,color=classes),alpha=1) +
xlab("") + ylab("") + custom_theme
if(!is.null(color_scale)) {
tmp_plot = tmp_plot + scale_color_manual(values=distinct_scale)
}
plot_list[[k]]=tmp_plot
}
final_plot=grid.arrange(gTree(children = gList(rectGrob(gp=gpar(fill="white",col="white", lwd=0)),
arrangeGrob(arrangeGrob(grobs=plot_list, ncol=layout[1], nrow=layout[2])
))))
final_plot=grid.arrange(gTree(children = gList(rectGrob(gp=gpar(fill="white",col="white", lwd=0)),
arrangeGrob(grobs=plot_list, ncol=layout[1], nrow=layout[2])
)))
plot_list
if (is.null(layout)) {
layout=c(ceiling(sqrt(ncol(data))),ceiling(sqrt(ncol(data))))
}
plot_list=list()
for (k in 1:ncol(data)) {
density_list_raw=by(data[,k],INDICES=classes,density,simplify = TRUE)
classes_vector=NULL
classes_list=lapply( density_list_raw,function(x) {length(x[[1]])})
for (k in 1:length(density_list_raw)) {
classes_vector=c(classes_vector,rep(names(classes_list[k]), classes_list[k]))
}
tmp_plot_data=data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[2]]})),classes=as.factor(classes_vector))
tmp_plot=ggplot(data=tmp_plot_data) +
geom_line(aes(x=x,y=y,color=classes),alpha=1) +
xlab("") + ylab("") + custom_theme
if(!is.null(color_scale)) {
tmp_plot = tmp_plot + scale_color_manual(values=distinct_scale)
}
plot_list[[k]]=tmp_plot
}
plot_list
k=1
density_list_raw=by(data[,k],INDICES=classes,density,simplify = TRUE)
classes_vector=NULL
classes_list=lapply( density_list_raw,function(x) {length(x[[1]])})
for (k in 1:length(density_list_raw)) {
classes_vector=c(classes_vector,rep(names(classes_list[k]), classes_list[k]))
}
tmp_plot_data=data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[2]]})),classes=as.factor(classes_vector))
tmp_plot=ggplot(data=tmp_plot_data) +
geom_line(aes(x=x,y=y,color=classes),alpha=1) +
xlab("") + ylab("") + custom_theme
if(!is.null(color_scale)) {
tmp_plot = tmp_plot + scale_color_manual(values=distinct_scale)
}
tmp_plot
plot_list[[k]]=tmp_plot
plot_list
data=example_mixed_data_clustering_1[,1:3]
classes=as.factor(clusters_kmeans_FAMD)
layout=NULL
color_scale=distinct_scale
custom_theme=NULL
title=NULL
if (is.null(layout)) {
layout=c(ceiling(sqrt(ncol(data))),ceiling(sqrt(ncol(data))))
}
plot_list=list()
data=example_mixed_data_clustering_1[,4:7]
layout=c(ceiling(sqrt(ncol(data))),ceiling(sqrt(ncol(data))))
}
plot_list=list()
for (k in 1:ncol(data)) {
tmp_plot_data=as.data.frame(prop.table(table(data.frame(data[,k,drop=FALSE], classes)),margin =2))
tmp_plot_data$n_ind=as.data.frame(table(data.frame(data[,k,drop=FALSE], classes)))[,3]
tmp_plot_data=tmp_plot_data %>%
arrange(.[[2]], desc(.[[1]]))
tmp_plot_data$position=as.data.frame((tmp_plot_data %>% group_by(classes) %>% mutate(cumsum(Freq))))[,5]
tmp_plot_data$position=tmp_plot_data$position - tmp_plot_data$Freq/2
tmp_plot=ggplot(data=tmp_plot_data) +
geom_bar(aes_string(x="classes",y="Freq",fill=paste0(colnames(data)[k])),stat="identity",position="stack") +
xlab("") + ylab("") + custom_theme + geom_shadowtext(aes(x=classes,y=position,label=n_ind),check_overlap = TRUE,
size = 4)
if(!is.null(color_scale)) {
tmp_plot = tmp_plot + scale_fill_manual(values=color_scale)
}
plot_list[[k]]=tmp_plot
}
plot_list
data=example_mixed_data_clustering_1[,1:3]
classes=as.factor(clusters_kmeans_FAMD)
layout=NULL
color_scale=distinct_scale
custom_theme=NULL
title=NULL
if (is.null(layout)) {
layout=c(ceiling(sqrt(ncol(data))),ceiling(sqrt(ncol(data))))
}
plot_list=list()
k
data=example_mixed_data_clustering_1[,1:3]
classes=as.factor(clusters_kmeans_FAMD)
layout=NULL
color_scale=distinct_scale
custom_theme=NULL
title=NULL
ncol(data)
if (is.null(layout)) {
layout=c(ceiling(sqrt(ncol(data))),ceiling(sqrt(ncol(data))))
}
plot_list=list()
density_list_raw=by(data[,k],INDICES=classes,density,simplify = TRUE)
classes_vector=NULL
classes_list=lapply( density_list_raw,function(x) {length(x[[1]])})
for (k in 1:length(density_list_raw)) {
classes_vector=c(classes_vector,rep(names(classes_list[k]), classes_list[k]))
}
tmp_plot_data=data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[2]]})),classes=as.factor(classes_vector))
tmp_plot=ggplot(data=tmp_plot_data) +
geom_line(aes(x=x,y=y,color=classes),alpha=1) +
xlab("") + ylab("") + custom_theme
if(!is.null(color_scale)) {
tmp_plot = tmp_plot + scale_color_manual(values=distinct_scale)
}
k
k=1
if (is.null(layout)) {
layout=c(ceiling(sqrt(ncol(data))),ceiling(sqrt(ncol(data))))
}
plot_list=list()
density_list_raw=by(data[,k],INDICES=classes,density,simplify = TRUE)
classes_vector=NULL
classes_list=lapply( density_list_raw,function(x) {length(x[[1]])})
for (k in 1:length(density_list_raw)) {
classes_vector=c(classes_vector,rep(names(classes_list[k]), classes_list[k]))
}
tmp_plot_data=data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[2]]})),classes=as.factor(classes_vector))
tmp_plot=ggplot(data=tmp_plot_data) +
geom_line(aes(x=x,y=y,color=classes),alpha=1) +
xlab("") + ylab("") + custom_theme
if(!is.null(color_scale)) {
tmp_plot = tmp_plot + scale_color_manual(values=distinct_scale)
}
plot_list[[k]]=tmp_plot
plot_list
plot_list[[1]]
k
if (is.null(layout)) {
layout=c(ceiling(sqrt(ncol(data))),ceiling(sqrt(ncol(data))))
}
plot_list=list()
for (k in 1:ncol(data)) {
density_list_raw=by(data[,k],INDICES=classes,density,simplify = TRUE)
classes_vector=NULL
classes_list=lapply( density_list_raw,function(x) {length(x[[1]])})
for (i in 1:length(density_list_raw)) {
classes_vector=c(classes_vector,rep(names(classes_list[k]), classes_list[i]))
}
tmp_plot_data=data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[2]]})),classes=as.factor(classes_vector))
tmp_plot=ggplot(data=tmp_plot_data) +
geom_line(aes(x=x,y=y,color=classes),alpha=1) +
xlab("") + ylab("") + custom_theme
if(!is.null(color_scale)) {
tmp_plot = tmp_plot + scale_color_manual(values=distinct_scale)
}
plot_list[[k]]=tmp_plot
}
final_plot=grid.arrange(gTree(children = gList(rectGrob(gp=gpar(fill="white",col="white", lwd=0)),
arrangeGrob(grobs=plot_list, ncol=layout[1], nrow=layout[2])
)))
grid.arrange(final_plot)
if (is.null(layout)) {
layout=c(ceiling(sqrt(ncol(data))),ceiling(sqrt(ncol(data))))
}
plot_list=list()
for (k in 1:ncol(data)) {
density_list_raw=by(data[,k],INDICES=classes,density,simplify = TRUE)
classes_vector=NULL
classes_list=lapply( density_list_raw,function(x) {length(x[[1]])})
for (i in 1:length(density_list_raw)) {
classes_vector=c(classes_vector,rep(names(classes_list[i]), classes_list[i]))
}
tmp_plot_data=data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[2]]})),classes=as.factor(classes_vector))
tmp_plot=ggplot(data=tmp_plot_data) +
geom_line(aes(x=x,y=y,color=classes),alpha=1) +
xlab("") + ylab("") + custom_theme
if(!is.null(color_scale)) {
tmp_plot = tmp_plot + scale_color_manual(values=distinct_scale)
}
plot_list[[k]]=tmp_plot
}
#
# final_plot=grid.arrange(gTree(children = gList(rectGrob(gp=gpar(fill="white",col="white", lwd=0)),
#                                                arrangeGrob(arrangeGrob(grobs=plot_list, ncol=layout[1], nrow=layout[2])
#                                                ))))
#
final_plot=grid.arrange(gTree(children = gList(rectGrob(gp=gpar(fill="white",col="white", lwd=0)),
arrangeGrob(grobs=plot_list, ncol=layout[1], nrow=layout[2])
)))
grid.arrange(final_plot)
data=example_mixed_data_clustering_1[,1:3]
classes=as.factor(clusters_kmeans_FAMD)
layout=NULL
color_scale=distinct_scale
custom_theme=theme_jh
title=NULL
if (is.null(layout)) {
layout=c(ceiling(sqrt(ncol(data))),ceiling(sqrt(ncol(data))))
}
plot_list=list()
for (k in 1:ncol(data)) {
density_list_raw=by(data[,k],INDICES=classes,density,simplify = TRUE)
classes_vector=NULL
classes_list=lapply( density_list_raw,function(x) {length(x[[1]])})
for (i in 1:length(density_list_raw)) {
classes_vector=c(classes_vector,rep(names(classes_list[i]), classes_list[i]))
}
tmp_plot_data=data.frame(x=unlist(lapply(test,function(x) {x[[1]]})),y=unlist(lapply(test,function(x) {x[[2]]})),classes=as.factor(classes_vector))
tmp_plot=ggplot(data=tmp_plot_data) +
geom_line(aes(x=x,y=y,color=classes),alpha=1) +
xlab("") + ylab("") + custom_theme + ggtitle(colnames(data)[k]) + custom_theme
if(!is.null(color_scale)) {
tmp_plot = tmp_plot + scale_color_manual(values=distinct_scale)
}
plot_list[[k]]=tmp_plot
}
final_plot=grid.arrange(gTree(children = gList(rectGrob(gp=gpar(fill="white",col="white", lwd=0)),
arrangeGrob(grobs=plot_list, ncol=layout[1], nrow=layout[2])
)))
grid.arrange(final_plot)
cont_distribution_by_cluster=function(data,classes,layout=NULL,color_scale=NULL,custom_theme=NULL,title=NULL) {
if (is.null(layout)) {
layout=c(ceiling(sqrt(ncol(data))),ceiling(sqrt(ncol(data))))
}
plot_list=list()
for (k in 1:ncol(data)) {
density_list_raw=by(data[,k],INDICES=classes,density,simplify = TRUE)
classes_vector=NULL
classes_list=lapply(density_list_raw,function(x) {length(x[[1]])})
for (i in 1:length(density_list_raw)) {
classes_vector=c(classes_vector,rep(names(classes_list[i]), classes_list[i]))
}
tmp_plot_data=data.frame(x=unlist(lapply(density_list_raw,function(x) {x[[1]]})),
y=unlist(lapply(density_list_raw,function(x) {x[[2]]})),
classes=as.factor(classes_vector))
tmp_plot=ggplot(data=tmp_plot_data) +
geom_line(aes(x=x,y=y,color=classes),alpha=1) +
xlab("") + ylab("") + custom_theme + ggtitle(colnames(data)[k]) + custom_theme
if(!is.null(color_scale)) {
tmp_plot = tmp_plot + scale_color_manual(values=distinct_scale)
}
plot_list[[k]]=tmp_plot
}
final_plot=grid.arrange(gTree(children = gList(rectGrob(gp=gpar(fill="white",col="white", lwd=0)),
arrangeGrob(grobs=plot_list, ncol=layout[1], nrow=layout[2])
)))
grid.arrange(final_plot)
return(final_plot)
}
cont_distribution_by_cluster=function(data=example_mixed_data_clustering_1[,1:3],
classes=as.factor(clusters_kmeans_FAMD),layout=c(2,2),
color_scale=NULL,custom_theme=theme_jh)
kmeans_FAMD_cont_distribution_by_cluster=cont_distribution_by_cluster(data=example_mixed_data_clustering_1[,1:3],
classes=as.factor(clusters_kmeans_FAMD),layout=c(2,2),
color_scale=NULL,custom_theme=theme_jh)
grid.draw(kmeans_FAMD_cont_distribution_by_cluster)
grid.draw(kmeans_FAMD_cont_distribution_by_cluster)
kmeans_FAMD_cont_distribution_by_cluster=cont_distribution_by_cluster(data=example_mixed_data_clustering_1[,1:3],
classes=as.factor(clusters_kmeans_FAMD),layout=c(2,2),
color_scale=NULL,custom_theme=theme_jh)
grid.draw(kmeans_FAMD_cont_distribution_by_cluster)
using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
using("FactoMineR")
################################################################################
# WORKING DIRECTORY AND SOURCING FUNCTIONS
################################################################################
file_path<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(file_path)
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/FAMD_plots_utility.R")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/colors_themes_utility.R")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/clustering_utility.R")
################################################################################
# LOADING DATA
################################################################################
#Loading self made mixed data
example_mixed_data_clustering_1=readRDS("../../open_data/example_mixed_data_clustering_1.rds")
for (k in 1:3) {
example_mixed_data_clustering_1[,k]=as.numeric(as.character(example_mixed_data_clustering_1[,k]))
}
for (k in 4:ncol(example_mixed_data_clustering_1)) {
example_mixed_data_clustering_1[,k]=as.factor(example_mixed_data_clustering_1[,k])
}
print(class(example_mixed_data_clustering_1[,1]))
print(class(example_mixed_data_clustering_1[,4]))
true_clusters_example_mixed_data_clustering_1=c(rep(1,1000),rep(2,1000),rep(3,1000))
#Loading the mixed dat from the kamila package
example_mixed_data_clustering_kamila=readRDS("../../open_data/example_mixed_data_clustering_kamila.rds")
for (k in 5:ncol(example_mixed_data_clustering_kamila)) {
example_mixed_data_clustering_kamila[,k]=as.factor(example_mixed_data_clustering_kamila[,k])
}
true_clusters_kamila=example_mixed_data_clustering_kamila[,ncol(example_mixed_data_clustering_kamila)]
example_mixed_data_clustering_kamila=example_mixed_data_clustering_kamila[,-ncol(example_mixed_data_clustering_kamila)]
################################################################################################################
################################################################################################################
# Selfmade mixed data
################################################################################################################
################################################################################################################
################################################################################
# FAMD
################################################################################
FAMD_res_example_mixed_data_clustering_1=FAMD(example_mixed_data_clustering_1, ncp = ncol(example_mixed_data_clustering_1), graph = FALSE)
kmeans_FAMD_res_example_mixed_data_clustering_1=kmeans(FAMD_res_example_mixed_data_clustering_1$ind$coord[,1:7],centers=3)
clusters_kmeans_FAMD=kmeans_FAMD_res_example_mixed_data_clustering_1$cluster
kmeans_FAMD_classes_plot=make_FAMD_ind_plot_classes(FAMD_res_example_mixed_data_clustering_1,classes=clusters_kmeans_FAMD,
dims=c(1,2),custom_theme=theme_jh,color_scale=distinct_scale)
x11()
print(kmeans_FAMD_classes_plot)
head(example_mixed_data_clustering_1)
kmeans_CH_plot = ggplot(data=data.frame(n_centers,CH_criterion)) + geom_line(aes(x=n_centers,y=CH_criterion)) + theme_jh
x11()
print(kmeans_CH_plot)
n_centers=2:10
tot_withinss=rep(0,length(n_centers))
CH_criterion=rep(0,length(n_centers))
# Different numbers of centers
for (k in 1:length(n_centers)) {
clusters_kmeans_FAMD=kmeans(FAMD_res_example_mixed_data_clustering_1$ind$coord[,1:7], center = n_centers[k])
tot_withinss[k]=kmeans(FAMD_res_example_mixed_data_clustering_1$ind$coord[,1:7], center = n_centers[k])$tot.withinss
CH_criterion[k]=intCriteria(traj=FAMD_res_example_mixed_data_clustering_1$ind$coord[,1:7],
part=clusters_kmeans_FAMD$cluster,crit="Calinski_Harabasz")[[1]]
}
kmeans_CH_plot = ggplot(data=data.frame(n_centers,CH_criterion)) + geom_line(aes(x=n_centers,y=CH_criterion)) + theme_jh
x11()
print(kmeans_CH_plot)
kmeans_elbow_plot = ggplot(data=data.frame(n_centers,tot_withinss)) + geom_line(aes(x=n_centers,y=tot_withinss)) + theme_jh
x11()
print(kmeans_elbow_plot)
head(example_mixed_data_clustering_1)
kmeans_FAMD_mean_by_cluster_continuous_plot=mean_by_cluster_continuous(data=example_mixed_data_clustering_1[,1:3],
classes=as.factor(clusters_kmeans_FAMD),
color_scale=NULL,custom_theme=theme_jh,title=NULL)
x11()
print(kmeans_FAMD_mean_by_cluster_continuous_plot)
kmeans_FAMD_cat_distribution_by_cluster=cat_distribution_by_cluster(data=example_mixed_data_clustering_1[,4:7],
classes=as.factor(clusters_kmeans_FAMD),layout=c(2,2),
color_scale=NULL,custom_theme=theme_jh,
title="Distributions of categorical variables by classes")
grid.draw(kmeans_FAMD_cat_distribution_by_cluster)
kmeans_FAMD_cont_distribution_by_cluster=cont_distribution_by_cluster(data=example_mixed_data_clustering_1[,1:3],
classes=as.factor(clusters_kmeans_FAMD),layout=c(2,2),
color_scale=NULL,custom_theme=theme_jh)
grid.draw(kmeans_FAMD_cont_distribution_by_cluster)*
graphics.off()
rm(list=ls())
using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
using("FactoMineR")
################################################################################
# WORKING DIRECTORY AND SOURCING FUNCTIONS
################################################################################
file_path<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(file_path)
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/FAMD_plots_utility.R")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/colors_themes_utility.R")
source("C:/Users/JOE/Documents/R_utility_and_self_implementations/clustering_utility.R")
################################################################################
# LOADING DATA
################################################################################
#Loading self made mixed data
example_mixed_data_clustering_1=readRDS("../../open_data/example_mixed_data_clustering_1.rds")
for (k in 1:3) {
example_mixed_data_clustering_1[,k]=as.numeric(as.character(example_mixed_data_clustering_1[,k]))
}
for (k in 4:ncol(example_mixed_data_clustering_1)) {
example_mixed_data_clustering_1[,k]=as.factor(example_mixed_data_clustering_1[,k])
}
print(class(example_mixed_data_clustering_1[,1]))
print(class(example_mixed_data_clustering_1[,4]))
true_clusters_example_mixed_data_clustering_1=c(rep(1,1000),rep(2,1000),rep(3,1000))
#Loading the mixed dat from the kamila package
example_mixed_data_clustering_kamila=readRDS("../../open_data/example_mixed_data_clustering_kamila.rds")
for (k in 5:ncol(example_mixed_data_clustering_kamila)) {
example_mixed_data_clustering_kamila[,k]=as.factor(example_mixed_data_clustering_kamila[,k])
}
true_clusters_kamila=example_mixed_data_clustering_kamila[,ncol(example_mixed_data_clustering_kamila)]
example_mixed_data_clustering_kamila=example_mixed_data_clustering_kamila[,-ncol(example_mixed_data_clustering_kamila)]
################################################################################################################
################################################################################################################
# Selfmade mixed data
################################################################################################################
################################################################################################################
################################################################################
# FAMD
################################################################################
FAMD_res_example_mixed_data_clustering_1=FAMD(example_mixed_data_clustering_1, ncp = ncol(example_mixed_data_clustering_1), graph = FALSE)
